'use client'

import { useCart } from '@/context/CartContext'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import { api } from '@/lib/api'
import { toast } from 'sonner'
import { CreditCard, Smartphone, Bitcoin, DollarSign, Trash2, ArrowLeft, Lock } from 'lucide-react'

interface PaymentTerm {
  id: number
  title: string
  description?: string
  is_required: boolean
  is_active: boolean
  sort_order: number
}

export default function CheckoutPage() {
  const { items, clearCart, removeItem } = useCart()
  const router = useRouter()
  const [method, setMethod] = useState<'sberbank' | 'sbp' | 'ton' | 'usdt' | null>(null)
  const [paymentTerms, setPaymentTerms] = useState<PaymentTerm[]>([])
  const [acceptedTerms, setAcceptedTerms] = useState<Record<number, boolean>>({})
  const [loading, setLoading] = useState(false)

  const total = items.reduce((sum, item) => sum + Number(item.product.price_rub), 0)

  useEffect(() => {
    if (items.length === 0) {
      router.push('/')
      return
    }
    loadPaymentTerms()
  }, [items, router])

  const loadPaymentTerms = async () => {
    try {
      const response = await api.get('/api/payment-terms/')
      setPaymentTerms(response.data)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
      const initialTerms: Record<number, boolean> = {}
      response.data.forEach((term: PaymentTerm) => {
        initialTerms[term.id] = false
      })
      setAcceptedTerms(initialTerms)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π:', error)
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
      const defaultTerms = [
        {
          id: 1,
          title: "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω",
          description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π",
          is_required: true,
          is_active: true,
          sort_order: 1
        },
        {
          id: 2,
          title: "–í—ã –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
          description: "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –§–ó-152",
          is_required: true,
          is_active: true,
          sort_order: 2
        }
      ]
      setPaymentTerms(defaultTerms)
      setAcceptedTerms({ 1: false, 2: false })
    }
  }

  const validateTerms = (): boolean => {
    for (const term of paymentTerms) {
      if (term.is_required && !acceptedTerms[term.id]) {
        toast.error(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏–µ–º: "${term.title}"`)
        return false
      }
    }
    return true
  }

  const handleSubmit = async () => {
    if (!method) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')
      return
    }

    if (!validateTerms()) {
      return
    }

    if (items.length === 0) return

    setLoading(true)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/orders/bulk`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('access_token')}`,
        },
        body: JSON.stringify({
          items: items.map((item) => ({
            game_id: item.product.game_id,
            product_id: item.product.id,
            amount: item.product.price_rub,
            currency: 'RUB',
            payment_method: method,
            comment: JSON.stringify(item.inputs),
          }))
        }),
      })

      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
      }

      const data = await res.json()
      const orderId = data.id

      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫–∞–∑—É
      clearCart()
      router.push(`/order/${orderId}`)

    } catch (err: any) {
      toast.error(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞')
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const handleTermToggle = (termId: number) => {
    setAcceptedTerms(prev => ({
      ...prev,
      [termId]: !prev[termId]
    }))
  }

  const getPaymentMethodIcon = (method: string) => {
    switch (method) {
      case 'sberbank': return <CreditCard className="w-6 h-6 text-green-600" />
      case 'sbp': return <Smartphone className="w-6 h-6 text-blue-600" />
      case 'ton': return <Bitcoin className="w-6 h-6 text-blue-500" />
      case 'usdt': return <DollarSign className="w-6 h-6 text-green-500" />
      default: return <CreditCard className="w-6 h-6" />
    }
  }

  const getPaymentMethodName = (method: string) => {
    switch (method) {
      case 'sberbank': return '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
      case 'sbp': return '–°–ë–ü'
      case 'ton': return 'TON'
      case 'usdt': return 'USDT TON'
      default: return method
    }
  }

  const getPaymentMethodDescription = (method: string) => {
    switch (method) {
      case 'sberbank': return 'Visa, MasterCard, –ú–ò–†'
      case 'sbp': return '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π'
      case 'ton': return '–†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π'
      case 'usdt': return '–†—É—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–º'
      default: return ''
    }
  }

  if (items.length === 0) {
    return (
      <div className="py-8 max-w-3xl mx-auto text-center px-4">
        <h1 className="text-2xl font-bold mb-4">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h1>
        <p className="text-zinc-600 dark:text-zinc-400 mb-6">
          –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        </p>
        <button
          onClick={() => router.push('/')}
          className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition-colors"
        >
          –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
        </button>
      </div>
    )
  }

  return (
    <div className="py-8 max-w-4xl mx-auto space-y-8 px-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center gap-4">
        <button
          onClick={() => router.back()}
          className="p-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
        </button>
        <h1 className="text-2xl font-bold">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ç–æ–≤–∞—Ä—ã –∏ –æ–ø–ª–∞—Ç–∞ */}
        <div className="lg:col-span-2 space-y-6">
          {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
          <div className="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">–í–∞—à –∑–∞–∫–∞–∑ ({items.length})</h2>
              <button
                onClick={() => router.push('/order/cart')}
                className="text-blue-600 hover:text-blue-700 text-sm"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>

            <div className="space-y-4">
              {items.map((item, i) => (
                <div key={i} className="flex items-start gap-4 p-4 bg-zinc-50 dark:bg-zinc-800 rounded-lg">
                  <div className="flex-1">
                    <h3 className="font-semibold text-sm">{item.product.name}</h3>
                    <div className="text-lg font-bold text-green-600 mt-1">
                      ‚ÇΩ{item.product.price_rub}
                    </div>

                    {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ */}
                    {Object.keys(item.inputs).length > 0 && (
                      <div className="mt-3 space-y-1">
                        <div className="text-xs text-zinc-500 font-medium mb-1">–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</div>
                        {Object.entries(item.inputs).map(([key, value]) => (
                          <div key={key} className="text-xs text-zinc-600 dark:text-zinc-400">
                            <span className="font-medium">{key}:</span> {value}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>

                  <button
                    onClick={() => removeItem(i)}
                    className="p-2 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã */}
          <div className="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-6">
            <h2 className="text-lg font-semibold mb-4">üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {[
                { key: 'sberbank', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', desc: 'Visa, MasterCard, –ú–ò–†' },
                { key: 'sbp', name: '–°–ë–ü', desc: '–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π' },
                { key: 'ton', name: 'TON', desc: '–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π' },
                { key: 'usdt', name: 'USDT TON', desc: '–û–ø–ª–∞—Ç–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–º' },
              ].map((pm) => (
                <button
                  key={pm.key}
                  onClick={() => setMethod(pm.key as any)}
                  className={`p-4 border-2 rounded-lg text-left transition-colors ${
                    method === pm.key
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-zinc-300 dark:border-zinc-700 hover:border-zinc-400 dark:hover:border-zinc-600'
                  }`}
                >
                  <div className="flex items-center gap-3">
                    {getPaymentMethodIcon(pm.key)}
                    <div>
                      <div className="font-medium">{pm.name}</div>
                      <div className="text-sm text-zinc-500">{pm.desc}</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è */}
          {paymentTerms.length > 0 && (
            <div className="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-6">
              <h2 className="text-lg font-semibold mb-4">üìã –£—Å–ª–æ–≤–∏—è –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è</h2>
              <div className="space-y-4">
                {paymentTerms.map((term) => (
                  <label key={term.id} className="flex items-start gap-3 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={acceptedTerms[term.id] || false}
                      onChange={() => handleTermToggle(term.id)}
                      className="mt-1 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <div className="flex-1">
                      <div className="font-medium text-sm">
                        {term.title}
                        {term.is_required && <span className="text-red-500 ml-1">*</span>}
                      </div>
                      {term.description && (
                        <div className="text-xs text-zinc-600 dark:text-zinc-400 mt-1">
                          {term.description}
                        </div>
                      )}
                    </div>
                  </label>
                ))}

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã */}
                <div className="mt-4 pt-4 border-t border-zinc-200 dark:border-zinc-700">
                  <p className="text-xs text-zinc-500 dark:text-zinc-400">
                    –°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{' '}
                    <Link href="/legal/terms" target="_blank" className="text-blue-600 hover:underline">
                      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
                    </Link>
                    ,{' '}
                    <Link href="/legal/privacy" target="_blank" className="text-blue-600 hover:underline">
                      –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                    </Link>
                    {' '}–∏{' '}
                    <Link href="/legal/offer" target="_blank" className="text-blue-600 hover:underline">
                      –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç–æ–π
                    </Link>
                    . –í —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ{' '}
                    <Link href="/legal/refund" target="_blank" className="text-blue-600 hover:underline">
                      –ø–æ–ª–∏—Ç–∏–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    </Link>
                    .
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏—Ç–æ–≥–∏ */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 p-6 sticky top-6">
            <h3 className="text-lg font-semibold mb-4">–ò—Ç–æ–≥–æ</h3>

            {/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è */}
            <div className="space-y-2 mb-4">
              {items.map((item, i) => (
                <div key={i} className="flex justify-between text-sm">
                  <span className="text-zinc-600 dark:text-zinc-400">{item.product.name}</span>
                  <span>‚ÇΩ{item.product.price_rub}</span>
                </div>
              ))}
            </div>

            <div className="border-t border-zinc-200 dark:border-zinc-700 pt-4 mb-6">
              <div className="flex justify-between text-lg font-bold">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span>‚ÇΩ{total}</span>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
            <button
              onClick={handleSubmit}
              disabled={loading || !method}
              className="w-full bg-green-600 hover:bg-green-700 disabled:bg-zinc-400 disabled:cursor-not-allowed text-white px-6 py-4 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  –û–±—Ä–∞–±–æ—Ç–∫–∞...
                </>
              ) : (
                <>
                  <Lock className="w-4 h-4" />
                  –û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ{total}
                </>
              )}
            </button>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="mt-4 text-xs text-zinc-500 space-y-2">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span>–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}