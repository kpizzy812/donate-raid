// frontend/src/app/admin/games/create/page.tsx - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–õ–Ø –í–í–û–î–ê
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Plus, X, Upload, ImageIcon, Trash2 } from 'lucide-react'

interface Subcategory {
  name: string
  description: string
  sort_order: number
  enabled: boolean
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
interface InputField {
  name: string
  label: string
  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea'
  required: boolean
  placeholder?: string
  help_text?: string
  options?: string[]
  validation_regex?: string
  min_length?: number
  max_length?: number
  subcategory_id?: number | null  // –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
}

export default function CreateGamePage() {
  const router = useRouter()

  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  const [name, setName] = useState('')
  const [description, setDescription] = useState('')
  const [instructions, setInstructions] = useState('')
  const [faq, setFaq] = useState('')
  const [subcategoryDescription, setSubcategoryDescription] = useState('')
  const [autoSupport, setAutoSupport] = useState(true)
  const [enabled, setEnabled] = useState(true)
  const [sortOrder, setSortOrder] = useState(0)

  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [bannerUrl, setBannerUrl] = useState('')
  const [logoUrl, setLogoUrl] = useState('')
  const [bannerUploading, setBannerUploading] = useState(false)
  const [logoUploading, setLogoUploading] = useState(false)

  // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [subcategories, setSubcategories] = useState<Subcategory[]>([])

  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—è –≤–≤–æ–¥–∞
  const [inputFields, setInputFields] = useState<InputField[]>([])

  // –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
  const addInputField = () => {
    setInputFields([...inputFields, {
      name: '',
      label: '',
      type: 'text',
      required: true,
      placeholder: '',
      help_text: ''
    }])
  }

  const removeInputField = (index: number) => {
    setInputFields(inputFields.filter((_, i) => i !== index))
  }

  const updateInputField = (index: number, field: keyof InputField, value: any) => {
  const updated = [...inputFields]
  updated[index] = { ...updated[index], [field]: value }
  setInputFields(updated)
}

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const addSubcategory = () => {
    setSubcategories([...subcategories, {
      name: '',
      description: '',
      sort_order: subcategories.length,
      enabled: true
    }])
  }

  const updateSubcategory = (index: number, field: keyof Subcategory, value: any) => {
    const updated = [...subcategories]
    updated[index] = { ...updated[index], [field]: value }
    setSubcategories(updated)
  }

  const removeSubcategory = (index: number) => {
    setSubcategories(subcategories.filter((_, i) => i !== index))
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  const handleSubmit = async () => {
    if (!name.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã')
      return
    }

    try {
      console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...')

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –ë–ï–ó –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ (–æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)
      const gameData = {
        name: name.trim(),
        description: description.trim() || null,
        instructions: instructions.trim() || null,
        faq_content: faq.trim() || null,
        banner_url: bannerUrl || null,
        logo_url: logoUrl || null,
        subcategory_description: subcategoryDescription.trim() || null,
        auto_support: autoSupport,
        enabled,
        sort_order: sortOrder,
        input_fields: []  // –ò–ó–ú–ï–ù–ï–ù–û: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', gameData)

      const token = localStorage.getItem('access_token')
      const gameResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/games`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(gameData)
      })

      if (!gameResponse.ok) {
        const errorData = await gameResponse.json()
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã')
      }

      const createdGame = await gameResponse.json()
      const gameId = createdGame.id
      console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', gameId)

      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º mapping –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ ID
      const subcategoryIdMapping: { [index: number]: number } = {}
      console.log('üè∑Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
      let createdSubcategories = 0
      let errorCount = 0

      for (let i = 0; i < subcategories.length; i++) {
        const subcategory = subcategories[i]
        console.log(`üè∑Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ${i + 1}/${subcategories.length}:`, subcategory)

        if (subcategory.name.trim()) {
          const subcategoryData = {
            game_id: gameId,
            name: subcategory.name.trim(),
            description: subcategory.description.trim() || null,
            sort_order: subcategory.sort_order,
            enabled: subcategory.enabled
          }

          try {
            const subcategoryResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/subcategories/game/${gameId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify(subcategoryData)
            })

            if (subcategoryResponse.ok) {
              const createdSubcategory = await subcategoryResponse.json()
              console.log('‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', createdSubcategory)
              subcategoryIdMapping[i] = createdSubcategory.id  // –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º mapping
              createdSubcategories++
            } else {
              const errorData = await subcategoryResponse.json()
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', errorData)
              errorCount++
            }
          } catch (subcategoryError) {
            console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', subcategoryError)
            errorCount++
          }
        }
      }

      // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ subcategory_id
      if (inputFields.length > 0) {
        console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞...')

        // –ú–∞–ø–ø–∏–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ subcategory_id
        const mappedInputFields = inputFields.map(field => {
          const mappedField = { ...field }

          // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–º–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
          if (field.subcategory_id !== null && field.subcategory_id !== undefined) {
            mappedField.subcategory_id = subcategoryIdMapping[field.subcategory_id] || null
          }

          return mappedField
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π API –¥–ª—è —ç—Ç–æ–≥–æ)
        // –ò–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É —Å –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞
        try {
          const updateResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/games/${gameId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              input_fields: mappedInputFields
            })
          })

          if (updateResponse.ok) {
            console.log('‚úÖ –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–∑–¥–∞–Ω—ã')
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞')
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞:', error)
        }
      }

      console.log(`üìä –ò—Ç–æ–≥–∏: –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π ${createdSubcategories}, –æ—à–∏–±–æ–∫ ${errorCount}`)

      if (errorCount > 0) {
        alert(`‚ö†Ô∏è –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏.\n–°–æ–∑–¥–∞–Ω–æ: ${createdSubcategories}\n–û—à–∏–±–æ–∫: ${errorCount}`)
      } else {
        alert(`‚úÖ –ò–≥—Ä–∞, ${createdSubcategories} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ ${inputFields.length} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!`)
      }

      router.push('/admin/games')
    } catch (error: any) {
      console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error)
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: ${error.message}`)
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  const uploadBanner = async (file: File) => {
    setBannerUploading(true)
    const formData = new FormData()
    formData.append('file', file)
    formData.append('subfolder', 'games')

    try {
      const token = localStorage.getItem('access_token')
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/upload/admin/image`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: formData,
      })

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')

      const data = await response.json()
      if (data.success) {
        setBannerUrl(data.file_url)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞:', error)
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞')
    } finally {
      setBannerUploading(false)
    }
  }

  const uploadLogo = async (file: File) => {
    setLogoUploading(true)
    const formData = new FormData()
    formData.append('file', file)
    formData.append('subfolder', 'games')

    try {
      const token = localStorage.getItem('access_token')
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/upload/admin/image`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: formData,
      })

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')

      const data = await response.json()
      if (data.success) {
        setLogoUrl(data.file_url)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ:', error)
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ')
    } finally {
      setLogoUploading(false)
    }
  }

  const handleBannerUpload = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0]
      if (file) uploadBanner(file)
    }
    input.click()
  }

  const handleLogoUpload = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0]
      if (file) uploadLogo(file)
    }
    input.click()
  }

  const getImageUrl = (url: string) => {
    if (url.startsWith('http')) return url
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8001/api'
    const baseUrl = apiUrl.replace('/api', '')
    return url.startsWith('/') ? `${baseUrl}${url}` : `${baseUrl}/${url}`
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã</h1>

      <div className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-lg font-semibold mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã *</label>
              <input
                type="text"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={name}
                onChange={e => setName(e.target.value)}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
              <input
                type="number"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={sortOrder}
                onChange={e => setSortOrder(Number(e.target.value))}
              />
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã</label>
            <textarea
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              rows={3}
              value={description}
              onChange={e => setDescription(e.target.value)}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã..."
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π</label>
            <input
              type="text"
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              value={subcategoryDescription}
              onChange={e => setSubcategoryDescription(e.target.value)}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω"
            />
          </div>

          <div className="flex items-center gap-4">
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={autoSupport}
                onChange={e => setAutoSupport(e.target.checked)}
                className="w-4 h-4"
              />
              <span className="text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </label>
            <label className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={enabled}
                onChange={e => setEnabled(e.target.checked)}
                className="w-4 h-4"
              />
              <span className="text-sm">–í–∫–ª—é—á–µ–Ω–∞</span>
            </label>
          </div>
        </div>

        {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä—ã</h2>
            <button
              type="button"
              onClick={addSubcategory}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm flex items-center gap-2"
            >
              <Plus className="w-4 h-4" />
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </button>
          </div>

          {subcategories.length === 0 && (
            <p className="text-zinc-500 dark:text-zinc-400 text-sm mb-4">
              –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏–ª–∏ —Ç–∏–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ì–ª–æ–±–∞–ª, –ò–Ω–¥–æ–Ω–µ–∑–∏—è –¥–ª—è Mobile Legends).
              –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.
            </p>
          )}

          {subcategories.map((subcategory, index) => (
            <div key={index} className="border border-zinc-200 dark:border-zinc-700 rounded-lg p-4 mb-4">
              <div className="flex justify-between items-center mb-3">
                <h4 className="font-medium">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è #{index + 1}</h4>
                <button
                  onClick={() => removeSubcategory(index)}
                  className="text-red-600 hover:text-red-700"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
                <div>
                  <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={subcategory.name}
                    onChange={e => updateSubcategory(index, 'name', e.target.value)}
                    placeholder="–†–æ—Å—Å–∏—è"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                  <input
                    type="number"
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={subcategory.sort_order}
                    onChange={e => updateSubcategory(index, 'sort_order', Number(e.target.value))}
                  />
                </div>
              </div>

              <div className="mb-3">
                <label className="block text-sm font-medium mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <input
                  type="text"
                  className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                  value={subcategory.description}
                  onChange={e => updateSubcategory(index, 'description', e.target.value)}
                  placeholder="–¢–æ–≤–∞—Ä—ã –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"
                />
              </div>

              <div className="flex items-center gap-4">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={subcategory.enabled}
                    onChange={e => updateSubcategory(index, 'enabled', e.target.checked)}
                    className="rounded"
                  />
                  <span className="text-sm">–í–∫–ª—é—á–µ–Ω–∞</span>
                </label>
              </div>
            </div>
          ))}
        </div>

        {/* –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}
<div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
  <div className="flex justify-between items-center mb-4">
    <h2 className="text-lg font-semibold">–ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</h2>
    <button
      type="button"
      onClick={addInputField}
      className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm flex items-center gap-2"
    >
      <Plus className="w-4 h-4" />
      –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
    </button>
  </div>

  {inputFields.length === 0 && (
    <p className="text-zinc-500 dark:text-zinc-400 text-sm mb-4">
      –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∏–≥—Ä—ã.
      –ú–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–ª—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â–∏–º–∏ –¥–ª—è –≤—Å–µ–π –∏–≥—Ä—ã.
    </p>
  )}

  {inputFields.map((field, index) => (
    <div key={index} className="border border-zinc-200 dark:border-zinc-700 rounded-lg p-4 mb-4">
      <div className="flex justify-between items-center mb-3">
        <h4 className="font-medium">–ü–æ–ª–µ #{index + 1}</h4>
        <button
          onClick={() => removeInputField(index)}
          className="text-red-600 hover:text-red-700"
        >
          <X className="w-4 h-4" />
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
        <div>
          <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è *</label>
          <input
            type="text"
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.name}
            onChange={e => updateInputField(index, 'name', e.target.value)}
            placeholder="player_id"
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ *</label>
          <input
            type="text"
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.label}
            onChange={e => updateInputField(index, 'label', e.target.value)}
            placeholder="Player ID"
          />
        </div>
        {/* –î–û–ë–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div>
          <label className="block text-sm font-medium mb-1">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
          <select
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.subcategory_id || ''}
            onChange={e => updateInputField(index, 'subcategory_id', e.target.value ? Number(e.target.value) : null)}
          >
            <option value="">–î–ª—è –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π</option>
            {subcategories.map((sub, subIndex) => (
              <option key={subIndex} value={subIndex}>
              {sub.name || `–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ${subIndex + 1}`}
            </option>
            ))}
          </select>
          <p className="text-xs text-zinc-500 mt-1">
            –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–æ–ª–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
        <div>
          <label className="block text-sm font-medium mb-1">–¢–∏–ø –ø–æ–ª—è</label>
          <select
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.type}
            onChange={e => updateInputField(index, 'type', e.target.value)}
          >
            <option value="text">–¢–µ–∫—Å—Ç</option>
            <option value="email">Email</option>
            <option value="password">–ü–∞—Ä–æ–ª—å</option>
            <option value="number">–ß–∏—Å–ª–æ</option>
            <option value="select">–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫</option>
            <option value="textarea">–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
          </select>
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">Placeholder</label>
          <input
            type="text"
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.placeholder || ''}
            onChange={e => updateInputField(index, 'placeholder', e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Player ID"
          />
        </div>
      </div>

      {field.type === 'select' && (
        <div className="mb-3">
          <label className="block text-sm font-medium mb-1">–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞</label>
          <textarea
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            rows={3}
            value={field.options?.join('\n') || ''}
            onChange={e => updateInputField(index, 'options', e.target.value.split('\n').filter(opt => opt.trim()))}
            placeholder="–†–æ—Å—Å–∏—è&#10;–ì–ª–æ–±–∞–ª&#10;–ò–Ω–¥–æ–Ω–µ–∑–∏—è"
          />
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        <div>
          <label className="block text-sm font-medium mb-1">–ü–æ–¥—Å–∫–∞–∑–∫–∞</label>
          <input
            type="text"
            className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
            value={field.help_text || ''}
            onChange={e => updateInputField(index, 'help_text', e.target.value)}
            placeholder="–ù–∞–π–¥–∏—Ç–µ Player ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–≥—Ä—ã"
          />
        </div>
        <div className="flex items-center gap-4">
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={field.required}
              onChange={e => updateInputField(index, 'required', e.target.checked)}
              className="rounded"
            />
            <span className="text-sm">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ</span>
          </label>
        </div>
      </div>
    </div>
  ))}
</div>

        {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –±–∞–Ω–Ω–µ—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-lg font-semibold mb-4">–õ–æ–≥–æ—Ç–∏–ø –∏–≥—Ä—ã (–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞)</h2>
          <p className="text-sm text-zinc-500 dark:text-zinc-400 mb-4">
            –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã
          </p>

          {logoUrl ? (
            <div className="relative inline-block">
              <img
                src={getImageUrl(logoUrl)}
                alt="–õ–æ–≥–æ—Ç–∏–ø –∏–≥—Ä—ã"
                className="w-32 h-32 object-cover rounded-lg border border-zinc-300 dark:border-zinc-600"
                onError={(e) => e.currentTarget.style.display = 'none'}
              />
              <button
                onClick={() => setLogoUrl('')}
                className="absolute -top-2 -right-2 bg-red-600 hover:bg-red-700 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ) : (
            <button
              onClick={handleLogoUpload}
              disabled={logoUploading}
              className="border-2 border-dashed border-zinc-300 dark:border-zinc-600 hover:border-zinc-400 dark:hover:border-zinc-500 rounded-lg p-8 w-48 h-48 text-center transition-colors disabled:opacity-50 flex flex-col items-center justify-center"
            >
              {logoUploading ? (
                <Upload className="w-8 h-8 text-zinc-400 animate-spin" />
              ) : (
                <ImageIcon className="w-8 h-8 text-zinc-400" />
              )}
              <span className="text-zinc-600 dark:text-zinc-400">
                {logoUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞'}
              </span>
            </button>
          )}
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ FAQ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-lg font-semibold mb-4">–ö–æ–Ω—Ç–µ–Ω—Ç</h2>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</label>
            <textarea
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              rows={5}
              value={instructions}
              onChange={e => setInstructions(e.target.value)}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã..."
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">FAQ (JSON —Ñ–æ—Ä–º–∞—Ç)</label>
            <textarea
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              rows={6}
              value={faq}
              onChange={e => setFaq(e.target.value)}
              placeholder={`[{"question": "–í–æ–ø—Ä–æ—Å 1", "answer": "–û—Ç–≤–µ—Ç 1"}, {"question": "–í–æ–ø—Ä–æ—Å 2", "answer": "–û—Ç–≤–µ—Ç 2"}]`}
            />
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-4">
          <button
            onClick={() => router.back()}
            className="px-6 py-3 bg-zinc-500 hover:bg-zinc-600 text-white rounded-lg transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handleSubmit}
            className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          >
            –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
          </button>
        </div>
      </div>
    </div>
  )
}