// frontend/src/app/admin/products/create/page.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { api } from '@/lib/api'
import { Plus, X, Upload, Image as ImageIcon } from 'lucide-react'

interface Game {
  id: number
  name: string
}

interface GameSubcategory {
  id: number
  game_id: number
  name: string
  description?: string
  sort_order: number
  enabled: boolean
}

interface InputField {
  name: string
  label: string
  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea'
  required: boolean
  placeholder?: string
  help_text?: string
  options?: string[]
  validation_regex?: string
  min_length?: number
  max_length?: number
}

export default function CreateProductPage() {
  const router = useRouter()

  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
  const [games, setGames] = useState<Game[]>([])
  const [gameSubcategories, setGameSubcategories] = useState<GameSubcategory[]>([]) // –î–û–ë–ê–í–õ–ï–ù–û
  const [gameId, setGameId] = useState<number>(0)
  const [name, setName] = useState('')
  const [priceRub, setPriceRub] = useState<number>(0)
  const [oldPriceRub, setOldPriceRub] = useState<number | null>(null)
  const [minAmount, setMinAmount] = useState<number>(1)
  const [maxAmount, setMaxAmount] = useState<number>(1)
  const [type, setType] = useState<'currency' | 'item' | 'service'>('currency')
  const [description, setDescription] = useState('')
  const [instructions, setInstructions] = useState('')
  const [delivery, setDelivery] = useState('auto')
  const [sortOrder, setSortOrder] = useState<number>(0)
  const [enabled, setEnabled] = useState(true)

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º subcategory_id –≤–º–µ—Å—Ç–æ subcategory
  const [specialNote, setSpecialNote] = useState('')
  const [noteType, setNoteType] = useState('warning')
  const [subcategoryId, setSubcategoryId] = useState<number | null>(null) // –ò–ó–ú–ï–ù–ï–ù–û
  const [imageUrl, setImageUrl] = useState('')
  const [imageUploading, setImageUploading] = useState(false)

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è
  const [inputFields, setInputFields] = useState<InputField[]>([])

  useEffect(() => {
    loadGames()
  }, [])

  // –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã
  useEffect(() => {
    if (gameId > 0) {
      loadGameSubcategories(gameId)
    } else {
      setGameSubcategories([])
      setSubcategoryId(null)
    }
  }, [gameId])

  const loadGames = async () => {
    try {
      const token = localStorage.getItem('access_token')
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/games`, {
        headers: { 'Authorization': `Bearer ${token}` }
      })
      if (response.ok) {
        const data = await response.json()
        setGames(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä:', error)
    }
  }

  // –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä—ã
  const loadGameSubcategories = async (gameId: number) => {
    try {
      const token = localStorage.getItem('access_token')
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/admin/subcategories/game/${gameId}`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      )
      if (response.ok) {
        const data = await response.json()
        setGameSubcategories(data)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      setGameSubcategories([])
    }
  }

  const uploadImage = async (file: File) => {
    if (!file.type.startsWith('image/')) {
      alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB')
      return
    }

    setImageUploading(true)

    try {
      const formData = new FormData()
      formData.append('file', file)
      formData.append('subfolder', 'products')

      const token = localStorage.getItem('access_token')
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å /upload/admin/image –≤–º–µ—Å—Ç–æ /admin/upload/image
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/upload/admin/image`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: formData,
      })

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')
      }

      const data = await response.json()
      if (data.success) {
        setImageUrl(data.file_url)
      } else {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)
      alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    } finally {
      setImageUploading(false)
    }
  }

  const handleImageUpload = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = 'image/*'
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0]
      if (file) uploadImage(file)
    }
    input.click()
  }

  const removeImage = () => {
    setImageUrl('')
  }

  const addInputField = () => {
    setInputFields([...inputFields, {
      name: '',
      label: '',
      type: 'text',
      required: true,
      placeholder: '',
      help_text: ''
    }])
  }

  const removeInputField = (index: number) => {
    setInputFields(inputFields.filter((_, i) => i !== index))
  }

  const updateInputField = (index: number, field: keyof InputField, value: any) => {
    const updated = [...inputFields]
    updated[index] = { ...updated[index], [field]: value }
    setInputFields(updated)
  }

  const handleSubmit = async () => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!gameId || !name.trim() || priceRub <= 0) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–≥—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞')
      return
    }

    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
      const productData = {
        game_id: gameId,
        name: name.trim(),
        price_rub: priceRub,
        old_price_rub: oldPriceRub,
        min_amount: minAmount,
        max_amount: maxAmount,
        type,
        description: description.trim() || null,
        instructions: instructions.trim() || null,
        enabled,
        delivery,
        sort_order: sortOrder,
        input_fields: inputFields,
        special_note: specialNote.trim() || null,
        note_type: noteType,
        subcategory_id: subcategoryId, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º subcategory_id
        image_url: imageUrl || null
      }

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:', productData)

      const token = localStorage.getItem('access_token')
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/admin/products`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
      }

      alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      router.push('/admin/products')
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error)
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error.message}`)
    }
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h1>

      <div className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-lg font-semibold mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ò–≥—Ä–∞ *</label>
              <select
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={gameId}
                onChange={e => setGameId(Number(e.target.value))}
              >
                <option value={0}>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</option>
                {games.map(game => (
                  <option key={game.id} value={game.id}>{game.name}</option>
                ))}
              </select>
            </div>

            {/* –î–û–ë–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div>
              <label className="block text-sm font-medium mb-2">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
              <select
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={subcategoryId || ''}
                onChange={e => setSubcategoryId(e.target.value ? Number(e.target.value) : null)}
                disabled={!gameId}
              >
                <option value="">–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                {gameSubcategories
                  .filter(sub => sub.enabled)
                  .map(subcategory => (
                    <option key={subcategory.id} value={subcategory.id}>
                      {subcategory.name}
                    </option>
                  ))}
              </select>
              {!gameId && (
                <p className="text-xs text-zinc-500 mt-1">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É</p>
              )}
              {gameId && gameSubcategories.length === 0 && (
                <p className="text-xs text-zinc-500 mt-1">
                  –£ —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–≥—Ä—ã.
                </p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</label>
              <input
                type="text"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={name}
                onChange={e => setName(e.target.value)}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–¶–µ–Ω–∞ (‚ÇΩ) *</label>
              <input
                type="number"
                step="0.01"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={priceRub}
                onChange={e => setPriceRub(Number(e.target.value))}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
              <input
                type="number"
                step="0.01"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={oldPriceRub || ''}
                onChange={e => setOldPriceRub(e.target.value ? Number(e.target.value) : null)}
                placeholder="–î–ª—è –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">–¢–∏–ø —Ç–æ–≤–∞—Ä–∞ *</label>
              <select
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={type}
                onChange={e => setType(e.target.value as 'currency' | 'item' | 'service')}
              >
                <option value="currency">üí∞ –í–∞–ª—é—Ç–∞</option>
                <option value="item">üì¶ –ü—Ä–µ–¥–º–µ—Ç</option>
                <option value="service">üîß –£—Å–ª—É–≥–∞</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
              <input
                type="number"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={minAmount}
                onChange={e => setMinAmount(Number(e.target.value))}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
              <input
                type="number"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={maxAmount}
                onChange={e => setMaxAmount(Number(e.target.value))}
              />
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
            <textarea
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              rows={3}
              value={description}
              onChange={e => setDescription(e.target.value)}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
            />
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</label>
            <textarea
              className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
              rows={4}
              value={instructions}
              onChange={e => setInstructions(e.target.value)}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞..."
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium mb-2">–û—Å–æ–±–∞—è –ø–æ–º–µ—Ç–∫–∞</label>
              <input
                type="text"
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={specialNote}
                onChange={e => setSpecialNote(e.target.value)}
                placeholder="–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –†–£ –∞–∫–∫–∞—É–Ω—Ç–∞, –•–∏—Ç –ø—Ä–æ–¥–∞–∂..."
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">–¢–∏–ø –ø–æ–º–µ—Ç–∫–∏</label>
              <select
                className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 focus:ring-2 focus:ring-blue-500"
                value={noteType}
                onChange={e => setNoteType(e.target.value)}
              >
                <option value="warning">‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–∂–µ–ª—Ç—ã–π)</option>
                <option value="info">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–∏–Ω–∏–π)</option>
                <option value="success">‚úÖ –£—Å–ø–µ—Ö (–∑–µ–ª–µ–Ω—ã–π)</option>
                <option value="error">‚ùå –û—à–∏–±–∫–∞ (–∫—Ä–∞—Å–Ω—ã–π)</option>
              </select>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={enabled}
              onChange={e => setEnabled(e.target.checked)}
              className="w-4 h-4"
            />
            <label className="text-sm">–ê–∫—Ç–∏–≤–µ–Ω (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ)</label>
          </div>
        </div>

        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-lg font-semibold mb-4">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h2>

          {imageUrl ? (
            <div className="relative inline-block">
              <img
                src={imageUrl}
                alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                className="w-48 h-32 object-cover rounded border"
              />
              <button
                onClick={removeImage}
                className="absolute -top-2 -right-2 bg-red-600 hover:bg-red-700 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ) : (
            <button
              onClick={handleImageUpload}
              disabled={imageUploading}
              className="border-2 border-dashed border-zinc-300 dark:border-zinc-600 hover:border-zinc-400 dark:hover:border-zinc-500 rounded-lg p-8 w-full text-center transition-colors disabled:opacity-50"
            >
              <div className="flex flex-col items-center gap-2">
                {imageUploading ? (
                  <Upload className="w-8 h-8 text-zinc-400 animate-spin" />
                ) : (
                  <ImageIcon className="w-8 h-8 text-zinc-400" />
                )}
                <span className="text-zinc-600 dark:text-zinc-400">
                  {imageUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}
                </span>
                <span className="text-xs text-zinc-500">JPG, PNG, GIF. –ú–∞–∫—Å. 5MB</span>
              </div>
            </button>
          )}
        </div>

        {/* –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ */}
        <div className="bg-white dark:bg-zinc-800 p-6 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-semibold">–ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</h2>
            <button
              type="button"
              onClick={addInputField}
              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm flex items-center gap-1"
            >
              <Plus className="w-4 h-4" />
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
            </button>
          </div>

          {inputFields.length === 0 && (
            <p className="text-zinc-500 dark:text-zinc-400 text-sm mb-4">
              –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
              (–Ω–∞–ø—Ä–∏–º–µ—Ä: Email, Player ID, –†–µ–≥–∏–æ–Ω, –°–µ—Ä–≤–µ—Ä –∏ —Ç.–¥.)
            </p>
          )}

          {inputFields.map((field, index) => (
            <div key={index} className="border border-zinc-200 dark:border-zinc-700 rounded-lg p-4 mb-4">
              <div className="flex justify-between items-center mb-3">
                <h4 className="font-medium">–ü–æ–ª–µ #{index + 1}</h4>
                <button
                  onClick={() => removeInputField(index)}
                  className="text-red-600 hover:text-red-700"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={field.name}
                    onChange={e => updateInputField(index, 'name', e.target.value)}
                    placeholder="player_id"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={field.label}
                    onChange={e => updateInputField(index, 'label', e.target.value)}
                    placeholder="ID –∏–≥—Ä–æ–∫–∞"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">–¢–∏–ø –ø–æ–ª—è</label>
                  <select
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={field.type}
                    onChange={e => updateInputField(index, 'type', e.target.value)}
                  >
                    <option value="text">–¢–µ–∫—Å—Ç</option>
                    <option value="email">Email</option>
                    <option value="password">–ü–∞—Ä–æ–ª—å</option>
                    <option value="number">–ß–∏—Å–ª–æ</option>
                    <option value="select">–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫</option>
                    <option value="textarea">–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">–ü–æ–¥—Å–∫–∞–∑–∫–∞</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                    value={field.placeholder || ''}
                    onChange={e => updateInputField(index, 'placeholder', e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID"
                  />
                </div>
              </div>

              <div className="mt-3">
                <label className="block text-sm font-medium mb-1">–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏</label>
                <input
                  type="text"
                  className="w-full p-2 border border-zinc-300 dark:border-zinc-600 rounded bg-white dark:bg-zinc-800"
                  value={field.help_text || ''}
                  onChange={e => updateInputField(index, 'help_text', e.target.value)}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ"
                />
              </div>

              <div className="mt-3 flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={field.required}
                  onChange={e => updateInputField(index, 'required', e.target.checked)}
                  className="w-4 h-4"
                />
                <label className="text-sm">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</label>
              </div>
            </div>
          ))}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex gap-4">
          <button
            onClick={() => router.back()}
            className="px-6 py-3 bg-zinc-500 hover:bg-zinc-600 text-white rounded-lg transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handleSubmit}
            className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          >
            –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
          </button>
        </div>
      </div>
    </div>
  )
}