// frontend/src/components/SupportChat.tsx
'use client'

import { useEffect, useRef, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'

interface SupportMessage {
  id: number
  user_id: number | null
  message: string
  is_from_user: boolean
  created_at: string
  status: 'new' | 'in_progress' | 'resolved'
  admin_id?: number
  thread_id?: number
}

const presetOptions = [
  '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º üòï',
  '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π üí≥',
  '–ù—É–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç üîô',
  '–ü—Ä–æ–±–ª–µ–º–∞/–≤–æ–ø—Ä–æ—Å –ø–æ —Å–∞–π—Ç—É üåê',
  '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ ü§ù',
  '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å ‚ùì'
]

const API_URL = process.env.NEXT_PUBLIC_API_URL || ''

export default function SupportChat() {
  const [messages, setMessages] = useState<SupportMessage[]>([])
  const [message, setMessage] = useState('')
  const [loading, setLoading] = useState(false)
  const [isOpen, setIsOpen] = useState(false)
  const [showPresets, setShowPresets] = useState(true)
  const [token, setToken] = useState<string | null>(null)
  const [guestId, setGuestId] = useState<string>('')
  const bottomRef = useRef<HTMLDivElement | null>(null)

  // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º guest_id
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const t = localStorage.getItem('access_token')
      setToken(t)

      let gid = localStorage.getItem('guest_id')
      if (!gid) {
        gid = uuidv4()
        localStorage.setItem('guest_id', gid)
      }
      setGuestId(gid)
    }
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±—ç–∫–∞
  async function fetchMessages() {
    try {
      const res = await fetch(`${API_URL}/support/my?guest_id=${guestId}`, {
        headers: token ? { Authorization: `Bearer ${token}` } : {}
      })
      const data = await res.json()

      if (Array.isArray(data)) {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–æ–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        setMessages(data)
        if (data.length > 0) {
          setShowPresets(false)
        }
      } else {
        setMessages([])
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', err)
      setMessages([])
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async function sendMessage(content: string) {
    if (!content.trim()) return
    setLoading(true)

    try {
      // –ö–ª–∞–¥–µ–º guest_id –≤ query
      const url = `${API_URL}/support/message?guest_id=${guestId}`
      const res = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(token ? { Authorization: `Bearer ${token}` } : {})
        },
        body: JSON.stringify({ message: content })
      })

      if (!res.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
      }

      // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
      const saved: SupportMessage = await res.json()
      // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
      setMessages((prev) => [...prev, saved])
      setShowPresets(false)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', err)
    } finally {
      setLoading(false)
      setMessage('')
      // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –ø–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
      setTimeout(fetchMessages, 500)
    }
  }

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ guestId –∑–∞–ø—É—Å–∫–∞–µ–º fetch –∏ —Å—Ç–∞–≤–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  useEffect(() => {
    if (guestId !== '') {
      fetchMessages()
      const interval = setInterval(fetchMessages, 10000)
      return () => clearInterval(interval)
    }
  }, [guestId, token])

  // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const hasSupportMessage = messages.some((m) => !m.is_from_user)

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {isOpen ? (
        <div className="w-80 h-[500px] bg-white dark:bg-zinc-900 border border-zinc-300 dark:border-zinc-700 rounded-xl shadow-2xl flex flex-col">
          <div className="flex items-center justify-between px-4 py-3 border-b border-zinc-200 dark:border-zinc-700 bg-zinc-100 dark:bg-zinc-800 rounded-t-xl">
            <span className="font-medium text-sm">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            <button
              onClick={() => setIsOpen(false)}
              className="text-zinc-500 hover:text-red-500 transition"
            >
              ‚úï
            </button>
          </div>
          <div className="flex-1 overflow-y-auto px-3 py-2 space-y-2">
            {!hasSupportMessage && (
              <div className="bg-zinc-100 dark:bg-zinc-700 text-sm text-zinc-800 dark:text-zinc-100 p-3 rounded-lg max-w-[90%]">
                –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞ —Å–∞–π—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.
              </div>
            )}

            {showPresets && (
              <div className="flex flex-wrap gap-2 mt-2">
                {presetOptions.map((opt) => (
                  <button
                    key={opt}
                    type="button"
                    onClick={() => sendMessage(opt)}
                    disabled={loading}
                    className="px-3 py-1.5 rounded-full border text-sm border-zinc-400 dark:border-zinc-600 hover:bg-zinc-200 dark:hover:bg-zinc-800 transition disabled:opacity-50"
                  >
                    {opt}
                  </button>
                ))}
              </div>
            )}

            {messages.map((msg) => (
              <div
                key={`${msg.id}-${msg.created_at}`}
                className={`max-w-[90%] px-4 py-2 rounded-lg text-sm whitespace-pre-wrap ${
                  msg.is_from_user
                    ? 'ml-auto bg-blue-100 text-zinc-900 dark:bg-blue-600 dark:text-white'
                    : 'mr-auto bg-zinc-100 text-zinc-800 dark:bg-zinc-700 dark:text-zinc-100'
                }`}
              >
                {/* –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –û–ø–µ—Ä–∞—Ç–æ—Ä */}
                {!msg.is_from_user && (
                  <div className="text-[10px] font-semibold mb-1">–û–ø–µ—Ä–∞—Ç–æ—Ä:</div>
                )}
                {msg.message}
                <div className="text-[10px] mt-1 opacity-60 text-right">
                  {new Date(msg.created_at).toLocaleString()}
                </div>
              </div>
            ))}

            <div ref={bottomRef} />
          </div>
          <div className="flex gap-2 p-3 border-t border-zinc-200 dark:border-zinc-700">
            <input
              type="text"
              className="flex-1 px-3 py-2 rounded-md border border-zinc-300 dark:border-zinc-700 dark:bg-zinc-800 dark:text-white"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && sendMessage(message)}
            />
            <button
              onClick={() => sendMessage(message)}
              disabled={loading}
              className="bg-blue-600 text-white px-3 py-2 rounded-md hover:bg-blue-700 transition disabled:opacity-50"
            >
              ‚û§
            </button>
          </div>
        </div>
      ) : (
        <button
          onClick={() => setIsOpen(true)}
          className="w-12 h-12 rounded-full shadow-lg bg-blue-600 hover:bg-blue-700 flex items-center justify-center text-white text-xl"
          aria-label="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        >
          üí¨
        </button>
      )}
    </div>
  )
}
