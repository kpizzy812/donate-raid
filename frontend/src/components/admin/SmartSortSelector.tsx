// frontend/src/components/admin/SmartSortSelector.tsx
'use client'

interface SortableItem {
  id: number
  name: string
  sort_order: number
}

interface Props {
  label: string
  items: SortableItem[]  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–∑–∏—Ü–∏–π
  currentItemId?: number  // ID —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
  value: number  // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sort_order
  onChange: (newSortOrder: number) => void
  placeholder?: string
}

export function SmartSortSelector({
  label,
  items,
  currentItemId,
  value,
  onChange,
  placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é"
}: Props) {
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
  const otherItems = items.filter(item => item.id !== currentItemId)

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
  const sortedItems = [...otherItems].sort((a, b) => a.sort_order - b.sort_order)

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const generateOptions = () => {
    const options = []

    // –û–ø—Ü–∏—è "–í –Ω–∞—á–∞–ª–æ" (–ø–æ–∑–∏—Ü–∏—è 1)
    options.push({
      value: 1,
      label: "üîù –í –Ω–∞—á–∞–ª–æ (–ø–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è)",
      description: sortedItems.length > 0 ? `–ü–µ—Ä–µ–¥ "${sortedItems[0]?.name}"` : "–ë—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º"
    })

    // –û–ø—Ü–∏–∏ "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"
    sortedItems.forEach((item, index) => {
      const nextItem = sortedItems[index + 1]
      const newPosition = item.sort_order + 1

      options.push({
        value: newPosition,
        label: `üìç –ü–æ—Å–ª–µ "${item.name}"`,
        description: nextItem
          ? `–ú–µ–∂–¥—É "${item.name}" –∏ "${nextItem.name}"`
          : "–í –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞"
      })
    })

    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 1
    if (sortedItems.length === 0) {
      return [{
        value: 1,
        label: "üéØ –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç",
        description: "–ë—É–¥–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º"
      }]
    }

    return options
  }

  const options = generateOptions()

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
  const currentOption = options.find(opt => opt.value === value) || options[0]

  return (
    <div>
      <label className="block text-sm font-medium mb-2 text-zinc-700 dark:text-zinc-300">
        {label}
      </label>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ */}
      {sortedItems.length > 0 && (
        <div className="mb-3 p-3 bg-zinc-50 dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <p className="text-sm font-medium text-zinc-600 dark:text-zinc-400 mb-2">
            üìã –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫:
          </p>
          <div className="space-y-1">
            {sortedItems.map((item, index) => (
              <div key={item.id} className="flex items-center gap-2 text-sm">
                <span className="font-mono text-xs bg-zinc-200 dark:bg-zinc-700 px-2 py-1 rounded">
                  #{item.sort_order}
                </span>
                <span className="text-zinc-700 dark:text-zinc-300">
                  {item.name}
                </span>
                {currentItemId === item.id && (
                  <span className="text-blue-600 dark:text-blue-400 text-xs">
                    (—Ç–µ–∫—É—â–∏–π)
                  </span>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ */}
      <select
        className="w-full p-3 border border-zinc-300 dark:border-zinc-600 rounded-lg bg-white dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        value={value}
        onChange={(e) => onChange(Number(e.target.value))}
      >
        <option value={0}>{placeholder}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ */}
      {currentOption && value > 0 && (
        <p className="mt-2 text-sm text-zinc-600 dark:text-zinc-400">
          üí° {currentOption.description}
        </p>
      )}

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ */}
      {value > 0 && (
        <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
          <p className="text-sm font-medium text-blue-700 dark:text-blue-300 mb-2">
            üîÆ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞:
          </p>
          <div className="space-y-1">
            {generatePreview().map((item, index) => (
              <div key={`${item.id}-${index}`} className="flex items-center gap-2 text-sm">
                <span className="font-mono text-xs bg-blue-200 dark:bg-blue-800 px-2 py-1 rounded">
                  #{index + 1}
                </span>
                <span className={`${item.isNew ? 'font-bold text-blue-700 dark:text-blue-300' : 'text-zinc-600 dark:text-zinc-400'}`}>
                  {item.name}
                </span>
                {item.isNew && (
                  <span className="text-xs bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 px-2 py-1 rounded">
                    –ù–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø
                  </span>
                )}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  function generatePreview() {
    const preview = []

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    sortedItems.forEach(item => {
      preview.push({ ...item, isNew: false })
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const newItem = {
      id: currentItemId || -1,
      name: currentItemId ? "–≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç" : "–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç",
      sort_order: value,
      isNew: true
    }

    preview.push(newItem)

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–≤—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    const sorted = preview.sort((a, b) => {
      if (a.sort_order === b.sort_order) {
        return a.isNew ? 1 : -1  // –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å —Ç–∞–∫–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–µ–π
      }
      return a.sort_order - b.sort_order
    })

    return sorted
  }
}