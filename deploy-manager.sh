#!/usr/bin/env bash
# deploy-manager.sh - –£–¥–æ–±–Ω—ã–π CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
set -eo pipefail  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ —Ñ–ª–∞–≥ -u

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ ~/.deploy-manager.conf)
DEFAULT_REMOTE_USER="root"
DEFAULT_REMOTE_HOST="87.120.166.236"
DEFAULT_REMOTE_DIR="/home/donate"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
CONFIG_FILE="$HOME/.deploy-manager.conf"
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
REMOTE_USER="${REMOTE_USER:-$DEFAULT_REMOTE_USER}"
REMOTE_HOST="${REMOTE_HOST:-$DEFAULT_REMOTE_HOST}"
REMOTE_DIR="${REMOTE_DIR:-$DEFAULT_REMOTE_DIR}"
LOCAL_DIR="$(pwd)"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
show_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}                    üöÄ DEPLOY MANAGER üöÄ                      ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${CYAN}                     DonateRaid Project                       ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${YELLOW}                         macOS                                ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üåê –°–µ—Ä–≤–µ—Ä: ${WHITE}${REMOTE_USER}@${REMOTE_HOST}${NC}"
    echo -e "${CYAN}üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${WHITE}${REMOTE_DIR}${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
show_menu() {
    echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo ""
    echo -e "${CYAN}üì¶ –î–ï–ü–õ–û–ô –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:${NC}"
    echo -e "  ${GREEN}1)${NC} üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (rsync + build + migrate + restart)"
    echo -e "  ${GREEN}2)${NC} üìÅ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ rsync)"
    echo -e "  ${GREEN}3)${NC} üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (server-setup.sh)"
    echo ""
    echo -e "${CYAN}üê≥ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ô–ù–ï–†–ê–ú–ò:${NC}"
    echo -e "  ${GREEN}4)${NC} ‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}5)${NC} ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}6)${NC} üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}7)${NC} üèóÔ∏è  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo ""
    echo -e "${CYAN}üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:${NC}"
    echo -e "  ${GREEN}8)${NC} üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}9)${NC} üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}10)${NC} üìà –ñ–∏–≤—ã–µ –ª–æ–≥–∏ (follow)"
    echo ""
    echo -e "${CYAN}üõ†Ô∏è  –†–ê–ó–†–ê–ë–û–¢–ö–ê:${NC}"
    echo -e "  ${GREEN}11)${NC} üêç –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"
    echo ""
    echo -e "${CYAN}üíæ –ë–≠–ö–ê–ü–´:${NC}"
    echo -e "  ${GREEN}12)${NC} üíæ –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø –ë–î"
    echo -e "  ${GREEN}13)${NC} üì• –°–∫–∞—á–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—ç–∫–∞–ø"
    echo -e "  ${GREEN}14)${NC} üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"
    echo ""
    echo -e "${CYAN}üîß –°–ò–°–¢–ï–ú–ê:${NC}"
    echo -e "  ${GREEN}15)${NC} üîç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"
    echo ""
    echo -e "  ${RED}0)${NC} ‚ùå –í—ã—Ö–æ–¥"
    echo ""
    echo -e -n "${YELLOW}–í–∞—à –≤—ã–±–æ—Ä [0-15]: ${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
confirm_action() {
    local message="$1"
    echo -e "${YELLOW}‚ö†Ô∏è  ${message}${NC}"
    echo -e -n "${YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N]: ${NC}"
    local response=""
    read -r response || true  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ || true
    case "$response" in
        [yY][eE][sS]|[yY])
            return 0
            ;;
        *)
            echo -e "${RED}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
            return 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã
pause() {
    echo ""
    echo -e -n "${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read -r || true  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ || true
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
check_requirements() {
    local missing_tools=()

    if ! command -v ssh >/dev/null 2>&1; then
        missing_tools+=("ssh")
    fi

    if ! command -v scp >/dev/null 2>&1; then
        missing_tools+=("scp")
    fi

    if ! command -v rsync >/dev/null 2>&1; then
        missing_tools+=("rsync")
    fi

    if [ ${#missing_tools[@]} -gt 0 ]; then
        echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${missing_tools[*]}${NC}"
        echo -e "${YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ Homebrew: brew install openssh rsync${NC}"
        return 1
    fi

    return 0
}

check_important_dirs() {
    echo -e "${CYAN}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...${NC}"

    ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
        cd ${REMOTE_DIR}
        echo "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º uploads/:"
        if [ -d "uploads" ]; then
            echo "  ‚úÖ uploads/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($(find uploads -type f | wc -l) —Ñ–∞–π–ª–æ–≤)"
        else
            echo "  ‚ö†Ô∏è uploads/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi

        echo "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º logs/:"
        if [ -d "logs" ]; then
            echo "  ‚úÖ logs/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            echo "  ‚ö†Ô∏è logs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi

        echo "üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º backups/:"
        if [ -d "backups" ]; then
            echo "  ‚úÖ backups/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($(find backups -name "*.sql" | wc -l) –±—ç–∫–∞–ø–æ–≤)"
        else
            echo "  ‚ö†Ô∏è backups/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
EOF
}

# 1. –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
full_deploy() {
    echo -e "${GREEN}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π...${NC}"

    if ! confirm_action "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)"; then
        return 1
    fi

    echo -e "${YELLOW}üîπ –®–∞–≥ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...${NC}"
    rsync -avz --delete \
    --exclude='.next' \
    --exclude='.git' \
    --exclude='node_modules' \
    --exclude='venv' \
    --exclude='.venv' \
    --exclude='__pycache__' \
    --exclude='.env' \
    --exclude='backups' \
    --exclude='uploads' \
    --exclude='logs' \
        "${LOCAL_DIR}/" "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/"

    echo -e "${YELLOW}üîπ –®–∞–≥ 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml down"

    echo -e "${YELLOW}üîπ –®–∞–≥ 3: –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml build --no-cache"

    echo -e "${YELLOW}üîπ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml up -d"

    echo -e "${YELLOW}üîπ –®–∞–≥ 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head"

    echo -e "${GREEN}‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!${NC}"
    show_container_status
}

# 2. –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
quick_sync() {
    echo -e "${GREEN}üìÅ –ë—ã—Å—Ç—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞...${NC}"

    echo -e "${BLUE}üìÇ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...${NC}"
    rsync -avz --delete \
        --exclude='.next' \
        --exclude='.git' \
        --exclude='node_modules' \
        --exclude='venv' \
        --exclude='.venv' \
        --exclude='__pycache__' \
        --exclude='.env' \
        --exclude='backups' \
        --exclude='uploads' \
        --exclude='logs' \
            "${LOCAL_DIR}/" "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/"

    echo -e "${GREEN}‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${NC}"
}

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
setup_server() {
    echo -e "${GREEN}üîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...${NC}"

    # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    quick_sync

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && chmod +x server-setup.sh && ./server-setup.sh"

    echo -e "${GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

# 4-7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
start_containers() {
    echo -e "${GREEN}‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml up -d"
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    show_container_status
}

stop_containers() {
    echo -e "${GREEN}‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml down"
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
}

restart_containers() {
    echo -e "${GREEN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml restart"
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    show_container_status
}

rebuild_containers() {
    echo -e "${GREEN}üèóÔ∏è –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"

    if ! confirm_action "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)"; then
        return 1
    fi

    ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
        cd ${REMOTE_DIR}
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
        docker-compose -f docker-compose.prod.yml down
        echo "üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –±–µ–∑ –∫—ç—à–∞..."
        docker-compose -f docker-compose.prod.yml build --no-cache
        echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose -f docker-compose.prod.yml up -d
EOF

    echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    show_container_status
}

# 8. –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
show_container_status() {
    echo -e "${GREEN}üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml ps"
}

# 9. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
show_logs() {
    echo -e "${GREEN}üìú –õ–æ–≥–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    echo -e "${YELLOW}(–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)${NC}"
    echo ""
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml logs --tail=50"
}

# 10. –ñ–∏–≤—ã–µ –ª–æ–≥–∏
follow_logs() {
    echo -e "${GREEN}üìà –ñ–∏–≤—ã–µ –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
    echo ""
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && docker-compose -f docker-compose.prod.yml logs -f"
}

# 11. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
apply_migrations() {
    echo -e "${GREEN}üêç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...${NC}"

    ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
        cd ${REMOTE_DIR}
        echo "üóÑÔ∏è  –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π:"
        docker-compose -f docker-compose.prod.yml exec -T backend alembic current || true
        echo ""
        echo "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
        docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
        echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
EOF
}

# 12. –ë—ç–∫–∞–ø –ë–î —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
backup_database() {
    echo -e "${GREEN}üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"

    local backup_name="backup_$(date +%Y%m%d_%H%M%S).sql"
    local local_backups_dir="./backups"

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p "${local_backups_dir}"

    echo -e "${YELLOW}üîπ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...${NC}"

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
        cd ${REMOTE_DIR}
        echo "üíæ –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø: ${backup_name}"
        mkdir -p backups

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'user', –±–∞–∑–∞ 'donate_raid'
        docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U user -d donate_raid > "backups/${backup_name}"

        echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: backups/${backup_name}"
        echo "üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:"
        ls -lh "backups/${backup_name}"
EOF

    if [ $? -eq 0 ]; then
        echo -e "${YELLOW}üîπ –°–∫–∞—á–∏–≤–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É...${NC}"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
        if scp "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/backups/${backup_name}" "${local_backups_dir}/${backup_name}"; then
            echo -e "${GREEN}‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!${NC}"
            echo -e "${CYAN}üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${local_backups_dir}/${backup_name}${NC}"
            echo -e "${CYAN}üìè –†–∞–∑–º–µ—Ä: $(ls -lh "${local_backups_dir}/${backup_name}" | awk '{print $5}')${NC}"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
            echo -e "${YELLOW}üìã –õ–æ–∫–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã:${NC}"
            ls -lh "${local_backups_dir}/"*.sql 2>/dev/null || echo "  (–Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤)"
        else
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞${NC}"
            echo -e "${YELLOW}üí° –§–∞–π–ª –æ—Å—Ç–∞–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${REMOTE_HOST}:${REMOTE_DIR}/backups/${backup_name}${NC}"
        fi
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ${NC}"
    fi

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    echo -e "${YELLOW}üìã –ë—ç–∫–∞–ø—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:${NC}"
    ssh "${REMOTE_USER}@${REMOTE_HOST}" "ls -lh ${REMOTE_DIR}/backups/*.sql 2>/dev/null || echo '  (–Ω–µ—Ç —Ñ–∞–π–ª–æ–≤)'"
}

# 13. –°–∫–∞—á–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—ç–∫–∞–ø —Å —Å–µ—Ä–≤–µ—Ä–∞
download_backup() {
    echo -e "${GREEN}üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞...${NC}"

    local local_backups_dir="./backups"
    mkdir -p "${local_backups_dir}"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    echo -e "${YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:${NC}"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –Ω—É–º–µ—Ä—É–µ–º –∏—Ö
    local backup_list=$(ssh "${REMOTE_USER}@${REMOTE_HOST}" "ls ${REMOTE_DIR}/backups/*.sql 2>/dev/null | sort -r")

    if [ -z "$backup_list" ]; then
        echo -e "${RED}‚ùå –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –±—ç–∫–∞–ø–æ–≤${NC}"
        return 1
    fi

    local i=1
    declare -a backups_array

    while IFS= read -r backup_path; do
        local backup_file=$(basename "$backup_path")
        local file_size=$(ssh "${REMOTE_USER}@${REMOTE_HOST}" "ls -lh '$backup_path' | awk '{print \$5}'")
        local file_date=$(ssh "${REMOTE_USER}@${REMOTE_HOST}" "ls -l '$backup_path' | awk '{print \$6, \$7, \$8}'")

        echo -e "  ${GREEN}$i)${NC} $backup_file (${file_size}, ${file_date})"
        backups_array[$i]="$backup_file"
        ((i++))
    done <<< "$backup_list"

    echo ""
    echo -e -n "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è [1-$((i-1))] –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ${NC}"
    local choice=""
    read -r choice || true  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ || true

    if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [ "$choice" -le $((i-1)) ]; then
        local selected_backup="${backups_array[$choice]}"
        echo -e "${YELLOW}üîπ –°–∫–∞—á–∏–≤–∞–µ–º: $selected_backup${NC}"

        if scp "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}/backups/${selected_backup}" "${local_backups_dir}/${selected_backup}"; then
            echo -e "${GREEN}‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!${NC}"
            echo -e "${CYAN}üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${local_backups_dir}/${selected_backup}${NC}"
        else
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è${NC}"
        fi
    elif [ "$choice" = "0" ]; then
        echo -e "${YELLOW}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
    fi
}

# 14. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_backups() {
    echo -e "${GREEN}üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...${NC}"

    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:${NC}"
    echo -e "  ${GREEN}1)${NC} –õ–æ–∫–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)"
    echo -e "  ${GREEN}2)${NC} –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"
    echo -e "  ${GREEN}3)${NC} –ò –ª–æ–∫–∞–ª—å–Ω—ã–µ, –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ"
    echo -e "  ${RED}0)${NC} –û—Ç–º–µ–Ω–∞"
    echo ""
    echo -e -n "${YELLOW}–í–∞—à –≤—ã–±–æ—Ä [0-3]: ${NC}"
    local choice=""
    read -r choice || true  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ || true

    case "$choice" in
        1)
            cleanup_local_backups
            ;;
        2)
            cleanup_server_backups
            ;;
        3)
            cleanup_local_backups
            cleanup_server_backups
            ;;
        0)
            echo -e "${YELLOW}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
            ;;
    esac
}

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_local_backups() {
    local local_backups_dir="./backups"

    if [ ! -d "$local_backups_dir" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü–∞–ø–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        return
    fi

    echo -e "${YELLOW}üîπ –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π...${NC}"

    local old_files=$(find "$local_backups_dir" -name "backup_*.sql" -type f -mtime +7 2>/dev/null)

    if [ -z "$old_files" ]; then
        echo -e "${GREEN}‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è${NC}"
        return
    fi

    echo -e "${YELLOW}üìã –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã:${NC}"
    echo "$old_files" | while read -r file; do
        echo -e "  üìÑ $(basename "$file") ($(ls -lh "$file" | awk '{print $6, $7, $8}'))"
    done

    if confirm_action "–£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã?"; then
        echo "$old_files" | xargs rm -f
        echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã${NC}"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
cleanup_server_backups() {
    echo -e "${YELLOW}üîπ –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π...${NC}"

    ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
        cd ${REMOTE_DIR}/backups 2>/dev/null || { echo "–ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; exit 1; }

        old_files=\$(find . -name "backup_*.sql" -type f -mtime +30 2>/dev/null)

        if [ -z "\$old_files" ]; then
            echo "‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            exit 0
        fi

        echo "üìã –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
        echo "\$old_files" | while read -r file; do
            echo "  üìÑ \$(basename "\$file") (\$(ls -lh "\$file" | awk '{print \$6, \$7, \$8}'))"
        done

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        echo "\$old_files" > /tmp/old_backups.txt
EOF

    if [ $? -eq 0 ]; then
        if confirm_action "–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã?"; then
            ssh "${REMOTE_USER}@${REMOTE_HOST}" bash <<EOF
                cd ${REMOTE_DIR}/backups
                if [ -f /tmp/old_backups.txt ]; then
                    cat /tmp/old_backups.txt | xargs rm -f
                    rm -f /tmp/old_backups.txt
                    echo "‚úÖ –°—Ç–∞—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã"
                fi
EOF
        fi
    fi
}

# 15. SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
ssh_connect() {
    echo -e "${GREEN}üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...${NC}"
    echo -e "${YELLOW}–í—ã –±—É–¥–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ ${REMOTE_HOST}${NC}"
    echo -e "${YELLOW}–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'exit'${NC}"
    echo ""

    ssh "${REMOTE_USER}@${REMOTE_HOST}" "cd ${REMOTE_DIR} && bash"
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
main() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if ! check_requirements; then
        pause
        exit 1
    fi

    while true; do
        show_header
        show_menu

        local choice=""
        read -r choice || true  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ || true
        echo ""

        case "${choice:-}" in  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ :-
            1)
                full_deploy
                pause
                ;;
            2)
                quick_sync
                pause
                ;;
            3)
                setup_server
                pause
                ;;
            4)
                start_containers
                pause
                ;;
            5)
                stop_containers
                pause
                ;;
            6)
                restart_containers
                pause
                ;;
            7)
                rebuild_containers
                pause
                ;;
            8)
                show_container_status
                pause
                ;;
            9)
                show_logs
                pause
                ;;
            10)
                follow_logs
                ;;
            11)
                apply_migrations
                pause
                ;;
            12)
                backup_database
                pause
                ;;
            13)
                download_backup
                pause
                ;;
            14)
                cleanup_backups
                pause
                ;;
            15)
                ssh_connect
                ;;
            0)
                echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                pause
                ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ] && [ ! -f "docker-compose.prod.yml" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: docker-compose —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!${NC}"
    echo -e "${YELLOW}–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.${NC}"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
main