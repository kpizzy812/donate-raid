import asyncio
import threading
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.config import ADMIN_CHAT_IDS
from .handlers.manual_orders import manual_order_keyboard
from bot.instance import bot


async def send_to_admins(text: str, keyboard=None):
    for chat_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(chat_id, text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            print(f"[ERROR] Can't send to {chat_id}: {e}")


def notify_manual_order_sync(text: str, order_id: int = None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—É—á–Ω–æ–º –∑–∞–∫–∞–∑–µ"""
    kb = manual_order_keyboard(order_id) if order_id else None

    def run_notification():
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(send_to_admins(text, kb))
        except Exception as e:
            print(f"[ERROR] Notification failed: {e}")
        finally:
            try:
                loop.close()
            except:
                pass

    threading.Thread(target=run_notification, daemon=True).start()


def review_moderation_keyboard(review_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞"""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}")
    kb.button(text="üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="admin_reviews")
    kb.adjust(2, 1)
    return kb.as_markup()


def notify_new_review_sync(review_data: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    review_id = review_data.get('review_id')
    rating = review_data.get('rating')
    text = review_data.get('text', '')
    game_name = review_data.get('game_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
    email = review_data.get('masked_email', '–ù–µ—Ç email')
    user_info = review_data.get('user_info', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

    # –ó–≤–µ–∑–¥–æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    stars = "‚≠ê" * rating + "‚òÜ" * (5 - rating)

    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    review_text_short = text[:200] + "..." if len(text) > 200 else text

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: <b>{game_name}</b>\n"
        f"üë§ –û—Ç: {user_info}\n"
        f"üìß Email: <code>{email}</code>\n\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars} ({rating}/5)\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
        f"<i>{review_text_short}</i>"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    kb = review_moderation_keyboard(review_id)

    def run_notification():
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(send_to_admins(message, kb))
            print(f"‚úÖ [REVIEW] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ #{review_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"[ERROR] Review notification failed: {e}")
        finally:
            try:
                loop.close()
            except:
                pass

    threading.Thread(target=run_notification, daemon=True).start()