# backend/bot/handlers/admin.py - –ù–û–í–´–ô –§–ê–ô–õ –° –ê–î–ú–ò–ù–°–ö–ò–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc, func
from app.core.database import SessionLocal
from app.models.order import Order, OrderStatus, PaymentMethod
from app.models.user import User
from app.models.support import SupportMessage, SupportStatus
from bot.config import ADMIN_CHAT_IDS
from datetime import datetime, timedelta

router = Router()


def get_db() -> Session:
    return SessionLocal()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_CHAT_IDS


# üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
@router.message(F.text == "/admin")
async def admin_menu(msg: Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –†—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_manual_orders")
    kb.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin_support")
    kb.button(text="üìù –û—Ç–∑—ã–≤—ã", callback_data="admin_reviews")  # –î–û–ë–ê–í–õ–ï–ù–û
    kb.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    kb.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    kb.button(text="üîÑ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_all_orders")
    kb.adjust(2, 2, 2)

    await msg.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


# üìã –†—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "admin_manual_orders")
async def admin_manual_orders_menu(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    kb = InlineKeyboardBuilder()
    kb.button(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="manual_orders_pending")
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="manual_orders_done")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="manual_orders_canceled")
    kb.button(text="üìä –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="manual_orders_all")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(2, 2, 1)

    db = get_db()
    try:
        pending_count = db.query(Order).filter(
            Order.payment_method == PaymentMethod.manual,
            Order.status == OrderStatus.pending
        ).count()

        total_count = db.query(Order).filter(
            Order.payment_method == PaymentMethod.manual
        ).count()
    finally:
        db.close()

    await call.message.edit_text(
        f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: <b>{pending_count}</b>\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{total_count}</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await call.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
@router.callback_query(F.data.startswith("manual_orders_"))
async def show_manual_orders_by_status(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    status_map = {
        "manual_orders_pending": OrderStatus.pending,
        "manual_orders_done": OrderStatus.done,
        "manual_orders_canceled": OrderStatus.canceled,
        "manual_orders_all": None
    }

    status = status_map.get(call.data)
    status_name = {
        "manual_orders_pending": "–ù–æ–≤—ã–µ",
        "manual_orders_done": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "manual_orders_canceled": "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
        "manual_orders_all": "–í—Å–µ"
    }.get(call.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    db = get_db()
    try:
        query = db.query(Order).filter(Order.payment_method == PaymentMethod.manual)
        if status:
            query = query.filter(Order.status == status)

        orders = query.order_by(desc(Order.created_at)).limit(10).all()

        if not orders:
            text = f"üìã <b>{status_name} –∑–∞—è–≤–∫–∏</b>\n\nüì≠ –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            text = f"üìã <b>{status_name} –∑–∞—è–≤–∫–∏</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"

            for order in orders:
                user = db.query(User).get(order.user_id)
                username = user.username or user.email or f"ID:{user.id}" if user else "‚ùì"

                emoji = {"pending": "üÜï", "done": "‚úÖ", "canceled": "‚ùå"}.get(order.status.value, "‚ùì")

                text += (
                    f"{emoji} <b>#{order.id}</b> - {order.manual_game_name}\n"
                    f"üë§ {username}\n"
                    f"üí∞ {order.amount} {order.currency}\n"
                    f"üìÖ {order.created_at.strftime('%d.%m %H:%M')}\n"
                )

                if order.comment:
                    text += f"üí¨ {order.comment[:50]}...\n"
                text += "\n"

        kb = InlineKeyboardBuilder()
        if status == OrderStatus.pending and orders:
            kb.button(text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="manual_quick_actions")
        kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_manual_orders")
        kb.adjust(1)

        await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    finally:
        db.close()

    await call.answer()


# üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
@router.callback_query(F.data == "admin_support")
async def admin_support_menu(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
        new_messages = db.query(SupportMessage).filter(
            SupportMessage.status == SupportStatus.new,
            SupportMessage.is_from_user == True
        ).count()

        active_dialogs = db.query(SupportMessage.user_id, SupportMessage.guest_id).filter(
            SupportMessage.status != SupportStatus.resolved
        ).distinct().count()

        total_messages_today = db.query(SupportMessage).filter(
            SupportMessage.created_at >= datetime.now().replace(hour=0, minute=0, second=0)
        ).count()

    finally:
        db.close()

    kb = InlineKeyboardBuilder()
    kb.button(text="üÜï –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="support_new_messages")
    kb.button(text="üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏", callback_data="support_active_dialogs")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="support_stats")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(2, 1, 1)

    await call.message.edit_text(
        f"üí¨ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n"
        f"üÜï –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{new_messages}</b>\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: <b>{active_dialogs}</b>\n"
        f"üìÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{total_messages_today}</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await call.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(F.data == "support_new_messages")
async def show_new_support_messages(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        new_messages = db.query(SupportMessage).filter(
            SupportMessage.status == SupportStatus.new,
            SupportMessage.is_from_user == True
        ).order_by(desc(SupportMessage.created_at)).limit(5).all()

        if not new_messages:
            text = "üí¨ <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç"
        else:
            text = "üí¨ <b>–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"

            for msg in new_messages:
                user_label = f"ID:{msg.user_id}" if msg.user_id else f"–ì–æ—Å—Ç—å:{msg.guest_id[:8]}"
                text += (
                    f"üë§ {user_label}\n"
                    f"üí¨ {msg.message[:100]}...\n"
                    f"üïí {msg.created_at.strftime('%d.%m %H:%M')}\n\n"
                )

        kb = InlineKeyboardBuilder()
        kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ", callback_data="admin_support")

        await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    finally:
        db.close()

    await call.answer()


# üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().replace(hour=0, minute=0, second=0)

        orders_today = db.query(Order).filter(Order.created_at >= today).count()
        manual_orders_today = db.query(Order).filter(
            Order.created_at >= today,
            Order.payment_method == PaymentMethod.manual
        ).count()

        users_today = db.query(User).filter(User.created_at >= today).count()
        support_messages_today = db.query(SupportMessage).filter(
            SupportMessage.created_at >= today
        ).count()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_orders = db.query(Order).count()
        pending_manual = db.query(Order).filter(
            Order.payment_method == PaymentMethod.manual,
            Order.status == OrderStatus.pending
        ).count()

    finally:
        db.close()

    text = (
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_today}\n"
        f"üìã –†—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {manual_orders_today}\n"
        f"üë• –ù–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤: {users_today}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {support_messages_today}\n\n"
        f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_manual}"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()


# üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data == "admin_users")
async def admin_users_menu(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        total_users = db.query(User).count()
        new_users_today = db.query(User).filter(
            User.created_at >= datetime.now().replace(hour=0, minute=0, second=0)
        ).count()

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–∫–∞–∑–∞–º
        top_users = db.query(User, func.count(Order.id).label('order_count')).join(
            Order, User.id == Order.user_id
        ).group_by(User.id).order_by(desc('order_count')).limit(5).all()

    finally:
        db.close()

    text = (
        f"üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{new_users_today}</b>\n\n"
        f"üèÜ <b>–¢–æ–ø –ø–æ –∑–∞–∫–∞–∑–∞–º:</b>\n"
    )

    for user, order_count in top_users:
        username = user.username or user.email or f"ID:{user.id}"
        text += f"‚Ä¢ {username}: {order_count} –∑–∞–∫–∞–∑–æ–≤\n"

    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_user_search")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(1)

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
@router.callback_query(F.data == "admin_back")
async def admin_back(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –†—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_manual_orders")
    kb.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="admin_support")
    kb.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    kb.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    kb.button(text="üîÑ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_all_orders")
    kb.adjust(2, 2, 1)

    await call.message.edit_text(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await call.answer()


# üîÑ –í—Å–µ –∑–∞–∫–∞–∑—ã
@router.callback_query(F.data == "admin_all_orders")
async def admin_all_orders(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
        orders = (
            db.query(Order)
            .order_by(desc(Order.created_at))
            .limit(10)
            .all()
        )

        if not orders:
            text = "üì¶ <b>–í—Å–µ –∑–∞–∫–∞–∑—ã</b>\n\n‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(orders)} –∑–∞–∫–∞–∑–æ–≤</b>\n\n"

            for order in orders:
                user = db.query(User).get(order.user_id) if order.user_id else None
                username = user.username or user.email or f"ID:{user.id}" if user else "–ì–æ—Å—Ç—å"

                status_emoji = {
                    "pending": "‚è≥",
                    "paid": "üí∞",
                    "processing": "‚öôÔ∏è",
                    "done": "‚úÖ",
                    "canceled": "‚ùå"
                }.get(order.status.value, "‚ùì")

                game_name = order.manual_game_name or (order.game.name if order.game else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                text += (
                    f"{status_emoji} <b>#{order.id}</b> - {game_name}\n"
                    f"üë§ {username}\n"
                    f"üí∞ {order.amount} {order.currency}\n"
                    f"üìÖ {order.created_at.strftime('%d.%m %H:%M')}\n\n"
                )

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}"
    finally:
        db.close()

    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")

    await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    await call.answer()