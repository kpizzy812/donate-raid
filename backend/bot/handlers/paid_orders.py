# backend/bot/handlers/paid_orders.py
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.models.order import Order, OrderStatus
from app.models.user import User
from app.services.mailer import send_email, render_template
from decimal import Decimal

router = Router()


def get_db() -> Session:
    return SessionLocal()


# üí¨ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
def paid_order_keyboard(order_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"paid_complete_{order_id}")
    kb.button(text="üí∏ –í–æ–∑–≤—Ä–∞—Ç", callback_data=f"paid_refund_{order_id}")
    kb.adjust(2)
    return kb.as_markup()


# ‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
@router.callback_query(F.data.startswith("paid_complete_"))
async def complete_paid_order(call: CallbackQuery):
    order_id = int(call.data.split("_")[2])

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        if not order:
            await call.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await call.answer()
            return

        if order.status == OrderStatus.done:
            await call.message.answer("‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            await call.answer()
            return

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω
        order.status = OrderStatus.done
        db.commit()
        db.refresh(order)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.query(User).get(order.user_id)
        username = user.username or user.email or f"ID: {user.id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user and user.email:
            try:
                html = render_template("order_success.html", {
                    "order_id": order.id,
                    "product_name": order.product.name if order.product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä",
                    "amount": order.amount,
                    "currency": order.currency
                })
                send_email(
                    to=user.email,
                    subject="‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω | Donate Raid",
                    body=html
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

        await call.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order.id} –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üéÆ –ò–≥—Ä–∞: {order.game.name if order.game else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {order.product.name if order.product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
            f"üíµ –°—É–º–º–∞: {order.amount} {order.currency}\n"
            f"üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: —Å–µ–π—á–∞—Å",
            parse_mode="HTML"
        )
        await call.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await call.answer()
    finally:
        db.close()


# üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
@router.callback_query(F.data.startswith("paid_refund_"))
async def refund_paid_order(call: CallbackQuery):
    order_id = int(call.data.split("_")[2])

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        if not order:
            await call.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await call.answer()
            return

        if order.status == OrderStatus.canceled:
            await call.message.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.")
            await call.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).get(order.user_id)
        if not user:
            await call.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await call.answer()
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        refund_amount = float(order.amount)
        old_balance = user.balance or Decimal('0')
        user.balance = old_balance + Decimal(str(refund_amount))
        order.status = OrderStatus.canceled

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        db.refresh(user)
        db.refresh(order)

        username = user.username or user.email or f"ID: {user.id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        if user.email:
            try:
                html = render_template("order_refund.html", {
                    "order_id": order.id,
                    "refund_amount": refund_amount,
                    "currency": order.currency,
                    "username": user.username
                })
                send_email(
                    to=user.email,
                    subject="üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ | Donate Raid",
                    body=html
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")

        await call.message.edit_text(
            f"üí∏ <b>–í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order.id} –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üéÆ –ò–≥—Ä–∞: {order.game.name if order.game else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {order.product.name if order.product else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n"
            f"üí∏ –í–æ–∑–≤—Ä–∞—Ç: {refund_amount} {order.currency}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –±—ã–ª: {old_balance}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å —Å—Ç–∞–ª: {user.balance}\n"
            f"üìÖ –í—Ä–µ–º—è: —Å–µ–π—á–∞—Å",
            parse_mode="HTML"
        )
        await call.answer("üí∏ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")

    except Exception as e:
        print(f"[ERROR] Refund failed: {e}")
        db.rollback()
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {str(e)}")
        await call.answer()
    finally:
        db.close()