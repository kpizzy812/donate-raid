# backend/bot/handlers/reviews.py - –û–ë–†–ê–ë–û–¢–ß–ò–ö –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import desc
from app.core.database import SessionLocal
from app.models.review import Review
from app.models.order import Order
from app.models.user import User
from bot.config import ADMIN_CHAT_IDS
from datetime import datetime
from loguru import logger

router = Router()


def get_db() -> Session:
    return SessionLocal()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_CHAT_IDS


def review_moderation_keyboard(review_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞"""
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review_id}")
    kb.button(text="üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"review_details_{review_id}")
    kb.button(text="üîô –ö –æ—Ç–∑—ã–≤–∞–º", callback_data="admin_reviews_list")
    kb.adjust(2, 1, 1)
    return kb.as_markup()


def reviews_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üÜï –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="reviews_pending")
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="reviews_approved")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="reviews_stats")
    kb.button(text="üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
    kb.adjust(2, 1, 1)
    return kb.as_markup()


# üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "admin_reviews")
async def admin_reviews_menu(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        pending_count = db.query(Review).filter(Review.is_approved == False).count()
        approved_count = db.query(Review).filter(Review.is_approved == True).count()
        total_count = db.query(Review).count()

        stats_text = (
            f"üìù <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
            f"üÜï –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{pending_count}</b>\n"
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: <b>{approved_count}</b>\n"
            f"üìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{total_count}</b>"
        )

        await call.message.edit_text(
            stats_text,
            reply_markup=reviews_menu_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_reviews_menu: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
    finally:
        db.close()


# üìã –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "reviews_pending")
async def show_pending_reviews(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        reviews = (
            db.query(Review)
            .options(joinedload(Review.order).joinedload(Order.user))
            .filter(Review.is_approved == False)
            .order_by(desc(Review.created_at))
            .limit(10)
            .all()
        )

        if not reviews:
            await call.message.edit_text(
                "üìù <b>–û—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "‚ú® –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=reviews_menu_keyboard(),
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤
        await show_review_for_moderation(call, reviews[0], 0, len(reviews))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_pending_reviews: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
    finally:
        db.close()


async def show_review_for_moderation(call: CallbackQuery, review: Review, index: int, total: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = "üëª –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if review.order and review.order.user:
        user = review.order.user
        user_info = f"üë§ {user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user.id})"

    # –ó–≤–µ–∑–¥–æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    stars = "‚≠ê" * review.rating + "‚òÜ" * (5 - review.rating)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
    review_text = (
        f"üìù <b>–û—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ #{review.id}</b>\n"
        f"üìÑ <b>{index + 1}</b> –∏–∑ <b>{total}</b>\n\n"
        f"üéÆ –ò–≥—Ä–∞: <b>{review.game_name}</b>\n"
        f"{user_info}\n"
        f"üìß Email: <code>{review.get_masked_email()}</code>\n\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars} ({review.rating}/5)\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
        f"<i>{review.text}</i>\n\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {review.created_at.strftime('%d.%m.%Y %H:%M')}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{review.id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"review_reject_{review.id}")

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ—Ç–∑—ã–≤—ã)
    if total > 1:
        nav_buttons = []
        if index > 0:
            nav_buttons.append(InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"review_nav_{index - 1}"))
        if index < total - 1:
            nav_buttons.append(InlineKeyboardBuilder().button(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data=f"review_nav_{index + 1}"))

        if nav_buttons:
            for btn in nav_buttons:
                kb.button(text=btn.text, callback_data=btn.callback_data)

    kb.button(text="üîô –ö –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_reviews")
    kb.adjust(2, 2 if total > 1 else 0, 1)

    await call.message.edit_text(
        review_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


# ‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("review_approve_"))
async def approve_review(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    review_id = int(call.data.split("_")[2])
    db = get_db()

    try:
        review = db.query(Review).filter(Review.id == review_id).first()
        if not review:
            await call.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        review.is_approved = True
        db.commit()

        logger.info(f"‚úÖ –û—Ç–∑—ã–≤ #{review_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}")

        await call.answer("‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await show_pending_reviews(call)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏", show_alert=True)
    finally:
        db.close()


# ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("review_reject_"))
async def reject_review(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    review_id = int(call.data.split("_")[2])
    db = get_db()

    try:
        review = db.query(Review).filter(Review.id == review_id).first()
        if not review:
            await call.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
        db.delete(review)
        db.commit()

        logger.info(f"‚ùå –û—Ç–∑—ã–≤ #{review_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}")

        await call.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await show_pending_reviews(call)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏", show_alert=True)
    finally:
        db.close()


# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "reviews_stats")
async def show_reviews_stats(call: CallbackQuery):
    if not is_admin(call.from_user.id):
        return await call.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    db = get_db()
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_reviews = db.query(Review).count()
        approved_reviews = db.query(Review).filter(Review.is_approved == True).count()
        pending_reviews = db.query(Review).filter(Review.is_approved == False).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)
        from sqlalchemy import func
        rating_stats = (
            db.query(Review.rating, func.count(Review.id))
            .filter(Review.is_approved == True)
            .group_by(Review.rating)
            .all()
        )

        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = (
                db.query(func.avg(Review.rating))
                .filter(Review.is_approved == True)
                .scalar() or 0
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        rating_text = ""
        for rating, count in sorted(rating_stats, reverse=True):
            stars = "‚≠ê" * rating
            rating_text += f"{stars}: {count} –æ—Ç–∑—ã–≤–æ–≤\n"

        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
            f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{total_reviews}</b>\n"
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: <b>{approved_reviews}</b>\n"
            f"üÜï –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{pending_reviews}</b>\n\n"
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{avg_rating:.1f}</b>\n\n"
            f"üìà <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º:</b>\n"
            f"{rating_text if rating_text else '–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤'}"
        )

        await call.message.edit_text(
            stats_text,
            reply_markup=reviews_menu_keyboard(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    finally:
        db.close()


# üìù –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–∑—ã–≤–∞–º
@router.message(F.text == "/reviews")
async def reviews_command(msg: Message):
    if not is_admin(msg.from_user.id):
        return await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    await admin_reviews_menu(msg)