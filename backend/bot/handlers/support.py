# backend/bot/handlers/support.py - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import sys
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc
from app.core.database import SessionLocal
from app.models.support import SupportMessage, SupportStatus
from app.models.user import User
from app.core.config import settings
from bot.states.support import SupportReplyState
from bot.instance import bot
from datetime import datetime
from loguru import logger

router = Router()


def get_db() -> Session:
    return SessionLocal()


# üéõÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
def support_keyboard(user_id: int = None, guest_id: str = None):
    kb = InlineKeyboardBuilder()

    if user_id:
        reply_data = f"support_reply_user_{user_id}"
        close_data = f"support_resolve_user_{user_id}"
        view_data = f"support_view_user_{user_id}"
    else:
        reply_data = f"support_reply_guest_{guest_id}"
        close_data = f"support_resolve_guest_{guest_id}"
        view_data = f"support_view_guest_{guest_id}"

    kb.button(text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=reply_data)
    kb.button(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=view_data)
    kb.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=close_data)
    kb.button(text="üîô –ö –¥–∏–∞–ª–æ–≥–∞–º", callback_data="support_back")
    kb.adjust(2, 2)

    return kb.as_markup()


# ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
async def notify_new_support_message(user_id: int = None, text: str = None, guest_id: str = None):
    logger.info(f"[notify] incoming: user_id={user_id} | guest_id={guest_id} | message='{text}'")

    db = get_db()
    try:
        username = "–ì–æ—Å—Ç—å"
        user_info = ""

        if user_id:
            user = db.query(User).filter_by(id=user_id).first()
            if user:
                username = user.username or user.email or f"ID: {user_id}"
                user_info = f"üìß {user.email}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.balance or 0} ‚ÇΩ\n"

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        message_count = db.query(SupportMessage).filter(
            and_(
                SupportMessage.user_id == user_id,
                SupportMessage.guest_id == guest_id
            )
        ).count()

        kb = support_keyboard(user_id, guest_id)

        message_text = (
            f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}</b>\n\n"
            f"{user_info}"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {message_count}\n"
            f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{text}"
        )

        if settings.TG_ADMIN_CHAT_IDS:
            admin_ids = [
                int(x.strip())
                for x in settings.TG_ADMIN_CHAT_IDS.split(",")
                if x.strip().isdigit()
            ]

            for admin_id in admin_ids:
                try:
                    await bot.send_message(
                        admin_id,
                        message_text,
                        parse_mode="HTML",
                        reply_markup=kb
                    )
                    logger.info(f"[notify] sent to admin {admin_id}")
                except Exception as e:
                    logger.warning(f"[notify] failed to send to admin {admin_id}: {e}")
    finally:
        db.close()


# ‚úçÔ∏è –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SupportReplyState.waiting_for_reply)
async def send_reply_support(msg: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    guest_id = data.get("guest_id")

    db = get_db()
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        reply = SupportMessage(
            user_id=user_id,
            guest_id=guest_id,
            message=msg.text,
            is_from_user=False,
            status=SupportStatus.in_progress,
            admin_id=msg.from_user.id,
            created_at=datetime.utcnow()
        )
        db.add(reply)
        db.commit()

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        db.query(SupportMessage).filter(
            and_(
                SupportMessage.user_id == user_id,
                SupportMessage.guest_id == guest_id,
                SupportMessage.is_from_user == True,
                SupportMessage.status == SupportStatus.new
            )
        ).update({"status": SupportStatus.in_progress})
        db.commit()

        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        if user_id:
            user = db.query(User).get(user_id)
            username = user.username or user.email or f"ID: {user_id}" if user else f"ID: {user_id}"
            await msg.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{username}</b>", parse_mode="HTML")
        elif guest_id:
            await msg.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é <code>{guest_id[:8]}...</code>", parse_mode="HTML")

    finally:
        db.close()

    await state.clear()


# üí¨ –ö–ª–∏–∫ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@router.callback_query(F.data.startswith("support_reply_"))
async def start_reply_support(call: CallbackQuery, state: FSMContext):
    data = call.data

    if data.startswith("support_reply_user_"):
        identifier = data.replace("support_reply_user_", "")
        await state.update_data(user_id=int(identifier), guest_id=None)
        await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    else:  # support_reply_guest_
        identifier = data.replace("support_reply_guest_", "")
        await state.update_data(user_id=None, guest_id=identifier)
        await call.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≥–æ—Å—Ç—é:")

    await state.set_state(SupportReplyState.waiting_for_reply)
    await call.answer()


# üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
@router.callback_query(F.data.startswith("support_view_"))
async def view_support_dialog(call: CallbackQuery):
    data = call.data
    db = get_db()

    try:
        if data.startswith("support_view_user_"):
            user_id = int(data.replace("support_view_user_", ""))
            messages = db.query(SupportMessage).filter_by(user_id=user_id).order_by(
                SupportMessage.created_at.desc()).limit(10).all()

            user = db.query(User).get(user_id)
            label = user.username or user.email or f"ID: {user_id}" if user else f"ID: {user_id}"
            kb = support_keyboard(user_id=user_id)
        else:
            guest_id = data.replace("support_view_guest_", "")
            messages = db.query(SupportMessage).filter_by(guest_id=guest_id).order_by(
                SupportMessage.created_at.desc()).limit(10).all()
            label = f"–ì–æ—Å—Ç—å: {guest_id[:8]}..."
            kb = support_keyboard(guest_id=guest_id)

        if not messages:
            history = "–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç."
        else:
            history = f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å {label}</b>\n\n"
            for msg in reversed(messages):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                prefix = "üë§" if msg.is_from_user else "üë®‚Äçüíº"
                time_str = msg.created_at.strftime('%d.%m %H:%M')
                history += f"{prefix} <i>{time_str}</i>\n{msg.message}\n\n"

        await call.message.edit_text(history, reply_markup=kb, parse_mode="HTML")
    finally:
        db.close()

    await call.answer()


# ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
@router.callback_query(F.data.startswith("support_resolve_"))
async def close_support_dialog(call: CallbackQuery):
    data = call.data
    db = get_db()

    try:
        if data.startswith("support_resolve_user_"):
            user_id = int(data.replace("support_resolve_user_", ""))

            # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–µ
            updated_count = db.query(SupportMessage).filter_by(user_id=user_id).update({
                "status": SupportStatus.resolved
            })

            user = db.query(User).get(user_id)
            label = user.username or user.email or f"ID: {user_id}" if user else f"ID: {user_id}"
        else:
            guest_id = data.replace("support_resolve_guest_", "")

            # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–µ
            updated_count = db.query(SupportMessage).filter_by(guest_id=guest_id).update({
                "status": SupportStatus.resolved
            })

            label = f"–ì–æ—Å—Ç—å: {guest_id[:8]}..."

        db.commit()

        await call.message.edit_text(
            f"‚úÖ <b>–î–∏–∞–ª–æ–≥ —Å {label} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
            f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {updated_count}\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: {datetime.now().strftime('%d.%m %H:%M')}\n\n"
            f"–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö.",
            parse_mode="HTML"
        )
    finally:
        db.close()

    await call.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç")


# üìÇ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
@router.message(F.text == "/support")
async def list_support_dialogs(msg: Message):
    db = get_db()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (–Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–µ)
        active_dialogs = db.query(SupportMessage.user_id, SupportMessage.guest_id).filter(
            SupportMessage.status != SupportStatus.resolved
        ).distinct().all()

        if not active_dialogs:
            return await msg.answer("üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç</b>", parse_mode="HTML")

        kb = InlineKeyboardBuilder()
        text = "üìÇ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"

        for user_id, guest_id in active_dialogs:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            last = db.query(SupportMessage).filter(
                and_(
                    SupportMessage.user_id == user_id,
                    SupportMessage.guest_id == guest_id,
                    SupportMessage.status != SupportStatus.resolved
                )
            ).order_by(desc(SupportMessage.created_at)).first()

            if not last:
                continue

            # –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            new_count = db.query(SupportMessage).filter(
                and_(
                    SupportMessage.user_id == user_id,
                    SupportMessage.guest_id == guest_id,
                    SupportMessage.is_from_user == True,
                    SupportMessage.status == SupportStatus.new
                )
            ).count()

            if user_id:
                user = db.query(User).get(user_id)
                label = user.username or user.email or f"ID: {user_id}" if user else f"ID: {user_id}"
                callback_data = f"support_view_user_{user_id}"
                button_text = f"üë§ {label}"
            else:
                label = f"–ì–æ—Å—Ç—å: {guest_id[:8]}..."
                callback_data = f"support_view_guest_{guest_id}"
                button_text = f"üë• {label}"

            if new_count > 0:
                button_text += f" üî¥{new_count}"

            text += f"‚Ä¢ {label}: {last.message[:40]}...\n"
            kb.button(text=button_text, callback_data=callback_data)

        kb.adjust(1)
        await msg.answer(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    finally:
        db.close()


# üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –¥–∏–∞–ª–æ–≥–∞–º"
@router.callback_query(F.data == "support_back")
async def back_to_dialogs(call: CallbackQuery):
    db = get_db()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
        active_dialogs = db.query(SupportMessage.user_id, SupportMessage.guest_id).filter(
            SupportMessage.status != SupportStatus.resolved
        ).distinct().all()

        if not active_dialogs:
            await call.message.edit_text("üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç</b>", parse_mode="HTML")
            return

        kb = InlineKeyboardBuilder()
        text = "üìÇ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"

        for user_id, guest_id in active_dialogs:
            last = db.query(SupportMessage).filter(
                and_(
                    SupportMessage.user_id == user_id,
                    SupportMessage.guest_id == guest_id,
                    SupportMessage.status != SupportStatus.resolved
                )
            ).order_by(desc(SupportMessage.created_at)).first()

            if not last:
                continue

            new_count = db.query(SupportMessage).filter(
                and_(
                    SupportMessage.user_id == user_id,
                    SupportMessage.guest_id == guest_id,
                    SupportMessage.is_from_user == True,
                    SupportMessage.status == SupportStatus.new
                )
            ).count()

            if user_id:
                user = db.query(User).get(user_id)
                label = user.username or user.email or f"ID: {user_id}" if user else f"ID: {user_id}"
                callback_data = f"support_view_user_{user_id}"
                button_text = f"üë§ {label}"
            else:
                label = f"–ì–æ—Å—Ç—å: {guest_id[:8]}..."
                callback_data = f"support_view_guest_{guest_id}"
                button_text = f"üë• {label}"

            if new_count > 0:
                button_text += f" üî¥{new_count}"

            text += f"‚Ä¢ {label}: {last.message[:40]}...\n"
            kb.button(text=button_text, callback_data=callback_data)

        kb.adjust(1)
        await call.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    finally:
        db.close()

    await call.answer()