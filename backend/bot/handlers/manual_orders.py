from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.models.order import Order, OrderStatus
from app.models.user import User
from bot.states.manual_orders import ApproveOrderState, RefundOrderState

router = Router()

def get_db() -> Session:
    return SessionLocal()

# üí¨ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
def manual_order_keyboard(order_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{order_id}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º", callback_data=f"reject_with_refund_{order_id}")
    kb.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞", callback_data=f"reject_no_refund_{order_id}")
    kb.adjust(1)
    return kb.as_markup()

# ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith("approve_"))
async def approve_manual_order_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(ApproveOrderState.amount)
    order_id = int(call.data.split("_")[1])
    await state.update_data(order_id=order_id)
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–ª–∏–µ–Ω—Ç:")
    await call.answer()

@router.message(ApproveOrderState.amount)
async def approve_manual_order_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    try:
        amount = float(msg.text)
    except ValueError:
        return await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    db = get_db()
    order = db.query(Order).get(order_id)
    if not order or order.status != OrderStatus.pending:
        return await msg.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

    order.status = OrderStatus.completed
    order.amount = amount
    db.commit()

    await msg.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É {amount} {order.currency}")
    await state.clear()

# ‚Ü©Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
@router.callback_query(F.data.startswith("reject_with_refund_"))
async def reject_with_refund_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(RefundOrderState.amount)
    order_id = int(call.data.split("_")[-1])
    await state.update_data(order_id=order_id)
    await call.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞:")
    await call.answer()

@router.message(RefundOrderState.amount)
async def reject_with_refund_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    try:
        refund = float(msg.text)
    except ValueError:
        return await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    db = get_db()
    order = db.query(Order).get(order_id)
    user = db.query(User).get(order.user_id)

    if not order or order.status != OrderStatus.pending:
        return await msg.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

    user.balance += refund
    order.status = OrderStatus.canceled
    db.commit()

    await msg.answer(f"‚Ü©Ô∏è –ó–∞—è–≤–∫–∞ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç: {refund} {order.currency}")
    await state.clear()

# ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç
@router.callback_query(F.data.startswith("reject_no_refund_"))
async def reject_without_refund(call: CallbackQuery):
    order_id = int(call.data.split("_")[-1])
    db = get_db()
    order = db.query(Order).get(order_id)

    if not order or order.status != OrderStatus.pending:
        return await call.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

    order.status = OrderStatus.canceled
    db.commit()

    await call.message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞.")
    await call.answer()
