from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from app.core.database import SessionLocal
from app.models.order import Order, OrderStatus
from app.models.user import User
from bot.states.manual_orders import ApproveOrderState, RefundOrderState
from decimal import Decimal  # –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢

router = Router()


def get_db() -> Session:
    return SessionLocal()


# üí¨ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
def manual_order_keyboard(order_id: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{order_id}")
    kb.button(text="‚Ü©Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º", callback_data=f"reject_with_refund_{order_id}")
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order_id}")
    kb.adjust(1)
    return kb.as_markup()


# ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith("approve_"))
async def approve_manual_order(call: CallbackQuery):
    order_id = int(call.data.split("_")[1])

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        if not order or order.status != OrderStatus.pending:
            await call.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            await call.answer()
            return

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ completed (done)
        order.status = OrderStatus.done
        db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.query(User).get(order.user_id)
        username = user.username or user.email or f"ID: {user.id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        await call.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.id} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üéÆ –ò–≥—Ä–∞: <code>{order.manual_game_name}</code>\n"
            f"üíµ –°—É–º–º–∞: {order.amount} {order.currency}\n"
            f"üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Å–µ–π—á–∞—Å",
            parse_mode="HTML"
        )
        await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await call.answer()
    finally:
        db.close()


# ‚Ü©Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º
@router.callback_query(F.data.startswith("reject_with_refund_"))
async def reject_with_refund_start(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split("_")[-1])

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        if not order or order.status != OrderStatus.pending:
            await call.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            await call.answer()
            return

        await state.set_state(RefundOrderState.amount)
        await state.update_data(order_id=order_id)
        await call.message.answer(
            f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_id} (–º–∞–∫—Å–∏–º—É–º {order.amount} {order.currency}):")
        await call.answer()

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await call.answer()
    finally:
        db.close()


@router.message(RefundOrderState.amount)
async def reject_with_refund_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]

    try:
        refund = float(msg.text)
    except ValueError:
        return await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        user = db.query(User).get(order.user_id)

        if not order or order.status != OrderStatus.pending:
            return await msg.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

        if refund > float(order.amount):
            return await msg.answer(f"‚ùå –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å {order.amount} {order.currency}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Decimal
        user.balance = (user.balance or Decimal('0')) + Decimal(str(refund))
        order.status = OrderStatus.canceled
        db.commit()

        username = user.username or user.email or f"ID: {user.id}"

        await msg.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üí∏ –í–æ–∑–≤—Ä–∞—Ç: {refund} {order.currency}\n"
            f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
    finally:
        db.close()


# ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
@router.callback_query(F.data.startswith("delete_order_"))
async def delete_manual_order(call: CallbackQuery):
    order_id = int(call.data.split("_")[-1])

    db = get_db()
    try:
        order = db.query(Order).get(order_id)
        if not order:
            await call.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await call.answer()
            return

        user = db.query(User).get(order.user_id)
        username = user.username or user.email or f"ID: {user.id}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã
        db.delete(order)
        db.commit()

        await call.message.edit_text(
            f"üóëÔ∏è <b>–ó–∞—è–≤–∫–∞ #{order_id} —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üéÆ –ò–≥—Ä–∞: <code>{order.manual_game_name}</code>\n"
            f"üíµ –°—É–º–º–∞: {order.amount} {order.currency}\n"
            f"üìÖ –£–¥–∞–ª–µ–Ω–æ: —Å–µ–π—á–∞—Å",
            parse_mode="HTML"
        )
        await call.answer("üóëÔ∏è –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")

    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await call.answer()
    finally:
        db.close()