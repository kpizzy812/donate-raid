# backend/app/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from app.routers import router as api_router
from app.core.logger import logger
from fastapi.middleware.cors import CORSMiddleware

import os

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üÜï –î–û–ë–ê–í–õ–Ø–ï–ú WEBSOCKET –†–û–£–¢–ï–† –û–¢–î–ï–õ–¨–ù–û (–ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–ê –° API)
try:
    from app.routers.websocket_support import router as ws_router
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    app.include_router(ws_router, prefix="/ws/support")
    logger.info("‚úÖ WebSocket —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–∞ /ws/support")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è WebSocket —Ä–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")

# üÜï –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
uploads_dir = "uploads"
if not os.path.exists(uploads_dir):
    os.makedirs(uploads_dir)
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
    for subfolder in ["products", "images", "blog", "games", "avatars"]:
        os.makedirs(os.path.join(uploads_dir, subfolder), exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è uploads
app.mount("/uploads", StaticFiles(directory=uploads_dir), name="uploads")

@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"üì• {request.method} {request.url}")
    try:
        response = await call_next(request)
    except Exception as e:
        logger.exception(f"‚ùå Exception during request: {e}")
        raise
    logger.info(f"üì§ {response.status_code} {request.url}")
    return response

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API —Ä–æ—É—Ç–µ—Ä
app.include_router(api_router)

@app.get("/")
def read_root():
    logger.debug("Root endpoint called")
    return {"message": "Donate Raid API is running"}

if __name__ == "__main__":
    import uvicorn
    # –ü–æ—Ä—Ç 8000 –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–æ –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ 8001 —Å–Ω–∞—Ä—É–∂–∏
    uvicorn.run(app, host="0.0.0.0", port=8000)