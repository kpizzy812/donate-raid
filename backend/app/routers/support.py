# backend/app/routers/support.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
from fastapi import APIRouter, Depends, Request, Query
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.support import SupportMessage, SupportStatus
from app.services.auth import get_current_user_from_request_sync
from app.models.user import User
from datetime import datetime
from typing import Optional
from pydantic import BaseModel
from bot.handlers.support import notify_new_support_message

router = APIRouter()

# Pydantic —Å—Ö–µ–º—ã
class SupportMessageCreate(BaseModel):
    message: str

class SupportMessageRead(BaseModel):
    id: int
    user_id: Optional[int] = None
    guest_id: Optional[str] = None
    message: str
    is_from_user: bool
    created_at: datetime
    status: str

    class Config:
        from_attributes = True

@router.post("/send", response_model=SupportMessageRead)
async def create_support_message(
        data: SupportMessageCreate,
        request: Request,
        guest_id: Optional[str] = Query(None),
        db: Session = Depends(get_db),
):
    """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    user = None

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            user = get_current_user_from_request_sync(request, db)
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user.id}, email={user.email}")
        else:
            print("‚ÑπÔ∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –≥–æ—Å—Ç—å")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        user = None  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –≥–æ—Å—Ç—å

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = SupportMessage(
        user_id=user.id if user else None,
        guest_id=guest_id if not user else None,
        message=data.message,
        is_from_user=True,
        status=SupportStatus.new,
        created_at=datetime.utcnow()
    )

    db.add(message)
    db.commit()
    db.refresh(message)

    print(f"üìù –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: user_id={message.user_id}, guest_id={message.guest_id}, message='{message.message}'")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram
    try:
        await notify_new_support_message(
            user_id=user.id if user else None,
            text=data.message,
            guest_id=guest_id if not user else None
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    return message

@router.get("/my", response_model=list[SupportMessageRead])
async def get_my_support_messages(
        request: Request,
        guest_id: Optional[str] = Query(None),
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user = None

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        auth_header = request.headers.get("Authorization")
        if auth_header and auth_header.startswith("Bearer "):
            user = get_current_user_from_request_sync(request, db)
    except Exception:
        user = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    if user:
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—â–µ–º –ø–æ user_id
        messages = db.query(SupportMessage).filter(
            SupportMessage.user_id == user.id
        ).order_by(SupportMessage.created_at.asc()).all()
    elif guest_id:
        # –î–ª—è –≥–æ—Å—Ç–µ–π –∏—â–µ–º –ø–æ guest_id
        messages = db.query(SupportMessage).filter(
            SupportMessage.guest_id == guest_id
        ).order_by(SupportMessage.created_at.asc()).all()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ user_id, –Ω–∏ guest_id - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        messages = []

    return messages