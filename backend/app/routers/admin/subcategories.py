# backend/app/routers/admin/subcategories.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.game_subcategory import GameSubcategory
from app.models.game import Game
from app.schemas.game_subcategory import GameSubcategoryCreate, GameSubcategoryUpdate, GameSubcategoryRead
from app.services.auth import admin_required
from app.models.user import User
from typing import List
from loguru import logger

router = APIRouter()


@router.get("/game/{game_id}", response_model=List[GameSubcategoryRead])
def get_game_subcategories(
        game_id: int,
        db: Session = Depends(get_db),
        admin: User = Depends(admin_required)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–≥—Ä—ã"""
    logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–≥—Ä—ã {game_id}")

    game = db.query(Game).filter(Game.id == game_id).first()
    if not game:
        raise HTTPException(status_code=404, detail="Game not found")

    subcategories = db.query(GameSubcategory).filter(
        GameSubcategory.game_id == game_id
    ).order_by(GameSubcategory.sort_order.asc()).all()

    logger.info(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(subcategories)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    return subcategories


@router.post("/game/{game_id}", response_model=GameSubcategoryRead)
def create_subcategory(
        game_id: int,
        subcategory_data: GameSubcategoryCreate,
        db: Session = Depends(get_db),
        admin: User = Depends(admin_required)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä—ã"""
    logger.info(f"üè∑Ô∏è –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{subcategory_data.name}' –¥–ª—è –∏–≥—Ä—ã {game_id}")

    game = db.query(Game).filter(Game.id == game_id).first()
    if not game:
        raise HTTPException(status_code=404, detail="Game not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∏–≥—Ä—ã
    existing = db.query(GameSubcategory).filter(
        GameSubcategory.game_id == game_id,
        GameSubcategory.name == subcategory_data.name
    ).first()

    if existing:
        raise HTTPException(
            status_code=400,
            detail=f"Subcategory '{subcategory_data.name}' already exists for this game"
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º game_id –∏–∑ URL
    subcategory_data.game_id = game_id

    new_subcategory = GameSubcategory(**subcategory_data.dict())
    db.add(new_subcategory)
    db.commit()
    db.refresh(new_subcategory)

    logger.info(f"üè∑Ô∏è –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {new_subcategory.id}")
    return new_subcategory


@router.put("/{subcategory_id}", response_model=GameSubcategoryRead)
def update_subcategory(
        subcategory_id: int,
        update_data: GameSubcategoryUpdate,
        db: Session = Depends(get_db),
        admin: User = Depends(admin_required)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    logger.info(f"üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory_id}")

    subcategory = db.query(GameSubcategory).filter(GameSubcategory.id == subcategory_id).first()
    if not subcategory:
        raise HTTPException(status_code=404, detail="Subcategory not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if update_data.name and update_data.name != subcategory.name:
        existing = db.query(GameSubcategory).filter(
            GameSubcategory.game_id == subcategory.game_id,
            GameSubcategory.name == update_data.name,
            GameSubcategory.id != subcategory_id
        ).first()

        if existing:
            raise HTTPException(
                status_code=400,
                detail=f"Subcategory '{update_data.name}' already exists for this game"
            )

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    for field, value in update_data.dict(exclude_unset=True).items():
        setattr(subcategory, field, value)

    db.commit()
    db.refresh(subcategory)

    logger.info(f"üè∑Ô∏è –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcategory_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return subcategory


@router.delete("/{subcategory_id}")
def delete_subcategory(
        subcategory_id: int,
        db: Session = Depends(get_db),
        admin: User = Depends(admin_required)
):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    logger.info(f"üè∑Ô∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é {subcategory_id}")

    subcategory = db.query(GameSubcategory).filter(GameSubcategory.id == subcategory_id).first()
    if not subcategory:
        raise HTTPException(status_code=404, detail="Subcategory not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from app.models.product import Product
    products_count = db.query(Product).filter(Product.subcategory_id == subcategory_id).count()

    if products_count > 0:
        raise HTTPException(
            status_code=400,
            detail=f"Cannot delete subcategory: {products_count} products are still using it"
        )

    db.delete(subcategory)
    db.commit()

    logger.info(f"üè∑Ô∏è –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcategory_id} —É–¥–∞–ª–µ–Ω–∞")
    return {"detail": "Subcategory deleted successfully"}


@router.get("", response_model=List[GameSubcategoryRead])
def list_all_subcategories(
        db: Session = Depends(get_db),
        admin: User = Depends(admin_required)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ—Ö –∏–≥—Ä"""
    logger.info("üè∑Ô∏è –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    subcategories = db.query(GameSubcategory).order_by(
        GameSubcategory.game_id.asc(),
        GameSubcategory.sort_order.asc()
    ).all()

    return subcategories