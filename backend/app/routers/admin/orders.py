from fastapi import APIRouter, Depends, HTTPException, Query, Body
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from decimal import Decimal
from app.core.database import get_db
from app.models.order import Order, OrderStatus
from app.schemas.admin.orders import OrderRead, OrderUpdate
from app.services.auth import get_current_user
from app.models.user import User
from app.services.mailer import send_email, render_template
from app.services.auth import admin_required

router = APIRouter()


@router.get("/", response_model=list[OrderRead])
def list_orders(
    status: str | None = Query(None),
    db: Session = Depends(get_db),
    admin: User = Depends(admin_required)
):
    query = db.query(Order)
    if status:
        query = query.filter(Order.status == status)
    return query.order_by(Order.created_at.desc()).all()


@router.put("/{order_id}", response_model=OrderRead)
def update_order(
    order_id: int,
    order_update: OrderUpdate,
    db: Session = Depends(get_db),
    admin: User = Depends(admin_required)
):
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    for field, value in order_update.dict(exclude_unset=True).items():
        setattr(order, field, value)
    db.commit()
    db.refresh(order)

    user = db.query(User).filter(User.id == order.user_id).first()
    if order.status == "completed" and user and user.email:
        html = render_template("order_success.html", {
            "order_id": order.id,
            "amount": order.amount,
            "currency": order.currency,
            "username": user.username,
        })
        send_email(
            to=user.email,
            subject="‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω | Donate Raid",
            body=html
        )

    return order


@router.post("/{order_id}/refund")
def refund_order(
    order_id: int,
    refund_amount: float = Body(..., embed=True),
    db: Session = Depends(get_db),
    admin: User = Depends(admin_required),
):
    """
    –ê–¥–º–∏–Ω-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞–∫–∞–∑—É.
    - order_id: –∏–¥ –∑–∞–∫–∞–∑–∞ –≤ path
    - refund_amount: —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ JSON-body: { "refund_amount": 100.0 }
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ status == OrderStatus.pending
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refund_amount <= order.amount
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ canceled
    - —à–ª—ë–º –ø–∏—Å—å–º–æ
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    """

    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω refund_order: order_id={order_id}, refund_amount={refund_amount}, admin_id={admin.id}")

    # 1) –ù–∞–π–¥—ë–º —Å–∞–º –∑–∞–∫–∞–∑
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        print(f"    ‚Üí –ó–∞–∫–∞–∑ —Å id={order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="Order not found")

    # 2) –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    print(f"    ‚Üí –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ id={order.id}: {order.status} (enum), —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞={order.amount}")

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–º–æ—â–∏ Enum, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∏
    if order.status != OrderStatus.pending:
        print(f"    ‚Üí –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ id={order.id} = {order.status}, –≤–æ–∑–≤—Ä–∞—Ç –ù–ï —Ä–∞–∑—Ä–µ—à—ë–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è pending)")
        raise HTTPException(status_code=400, detail="Refund allowed only for pending orders")

    # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –±–æ–ª—å—à–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    if refund_amount > float(order.amount):
        print(f"    ‚Üí –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç {refund_amount} > —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {order.amount}")
        raise HTTPException(status_code=400, detail="Refund exceeds order amount")

    # 5) –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–∫–∞–∑
    user = db.query(User).filter(User.id == order.user_id).first()
    if not user:
        print(f"    ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id={order.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="User not found")

    # 6) –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    old_balance = user.balance or Decimal("0")
    new_balance = old_balance + Decimal(str(refund_amount))
    user.balance = new_balance
    order.status = OrderStatus.canceled
    db.commit()

    print(f"    ‚Üí –ë–∞–ª–∞–Ω—Å user_id={user.id} –±—ã–ª {old_balance}, —Å—Ç–∞–ª {new_balance}")
    print(f"    ‚Üí –ó–∞–∫–∞–∑ id={order.id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å {order.status}")

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å email
    if user.email:
        html = render_template("order_refund.html", {
            "order_id": order.id,
            "refund_amount": refund_amount,
            "currency": order.currency,
            "username": user.username,
        })
        send_email(
            to=user.email,
            subject="üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ | Donate Raid",
            body=html
        )
        print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")

    # 8) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    return {
        "status": "refunded",
        "refunded_amount": float(refund_amount),
        "order_id": order.id,
        "user_id": user.id,
        "currency": order.currency
    }