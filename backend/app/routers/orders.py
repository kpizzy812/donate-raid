# app/api/orders.py

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session, joinedload
from app.core.database import get_db
from app.services.auth import get_current_user
from app.models.order import Order, OrderStatus, PaymentMethod
from app.models.user import User
from app.models.product import Product
from app.services.referral import ReferralService
from app.models.referral import ReferralEarning
from app.schemas.order import OrderCreate, OrderRead
from app.services.mailer import send_email, render_template
from bot.notify import notify_manual_order_sync
from pydantic import BaseModel
from typing import List
from decimal import Decimal
from app.services.robokassa import robokassa_service

router = APIRouter()


# ------------------------------------------------------------
# 1) Endpoints –¥–ª—è ‚Äú–º–æ–∏ –∑–∞–∫–∞–∑—ã‚Äù (GET /me) ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏ –≤—Ö–æ–¥–µ
# ------------------------------------------------------------
@router.get("/me", response_model=list[OrderRead])
def get_my_orders(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    print("‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω get_my_orders –¥–ª—è user_id =", current_user.id)
    orders = (
        db.query(Order)
          .filter_by(user_id=current_user.id)
          .options(joinedload(Order.game), joinedload(Order.product))
          .order_by(Order.created_at.desc())
          .all()
    )
    print(f"    ‚Üí –í–µ—Ä–Ω—É–ª–æ—Å—å {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è user_id={current_user.id}")
    return orders


# ------------------------------------------------------------
# 2) Endpoint –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (GET /{order_id}) ‚Äî –ª–æ–≥–∏—Ä—É–µ–º param
# ------------------------------------------------------------
@router.get("/{order_id}", response_model=OrderRead)
def get_order(
    order_id: int,
    db: Session = Depends(get_db)
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω get_order, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ —Å order_id = {order_id}")
    order = (
        db.query(Order)
          .options(joinedload(Order.game), joinedload(Order.product))
          .filter(Order.id == order_id)
          .first()
    )
    if not order:
        print(f"    ‚Üí –ó–∞–∫–∞–∑ —Å id={order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω—É 404")
        raise HTTPException(status_code=404, detail="Order not found")
    print(f"    ‚Üí –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: id={order.id}, —Å—Ç–∞—Ç—É—Å={order.status}")
    return order


# ------------------------------------------------------------
# 3) Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (POST /)
# ------------------------------------------------------------
@router.post("", response_model=OrderRead)
def create_order(
    order_data: OrderCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω create_order –¥–ª—è user_id={current_user.id} c –¥–∞–Ω–Ω—ã–º–∏: {order_data.dict()}")
    new_order = Order(**order_data.dict())
    new_order.user_id = current_user.id

    db.add(new_order)
    db.commit()
    db.refresh(new_order)

    print(f"    ‚Üí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, id={new_order.id}, —Å—Ç–∞—Ç—É—Å={new_order.status}")

    # # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
    if new_order.status == OrderStatus.paid:
        try:
            ReferralService.process_referral_earning(db, new_order)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã: {e}")

    if current_user.email:
        html = render_template("order_created.html", {
            "order_id": new_order.id,
            "amount": new_order.amount,
            "currency": new_order.currency,
            "username": current_user.username,
        })
        send_email(
            to=current_user.email,
            subject="‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω | Donate Raid",
            body=html
        )
        print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.email}")

    return new_order


# ------------------------------------------------------------
# 4) Endpoint –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (POST /{order_id}/cancel)
# ------------------------------------------------------------
@router.post("/{order_id}/cancel")
def cancel_order(
    order_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω cancel_order: order_id={order_id}, user_id={current_user.id}")
    order = db.query(Order).filter_by(id=order_id, user_id=current_user.id).first()

    if not order:
        print(f"    ‚Üí –ù–µ—Ç—É –∑–∞–∫–∞–∑–∞ —Å id={order_id} –∏–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç user_id={current_user.id}")
        raise HTTPException(status_code=404, detail="Order not found")

    if order.status != OrderStatus.pending:
        print(f"    ‚Üí –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ id={order_id}, —Å—Ç–∞—Ç—É—Å={order.status}")
        raise HTTPException(status_code=400, detail="Only pending orders can be cancelled")

    # –í–æ–∑–≤—Ä–∞—Ç –±–∞–ª–∞–Ω—Å–∞ —é–∑–µ—Ä—É
    current_user.balance += order.amount
    order.status = OrderStatus.canceled
    db.commit()

    print(f"    ‚Üí –ó–∞–∫–∞–∑ id={order_id} –ø–æ–º–µ—á–µ–Ω canceled, –±–∞–ª–∞–Ω—Å user_id={current_user.id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {order.amount}")

    if current_user.email:
        html = render_template("order_cancelled.html", {
            "order_id": order.id,
            "amount": order.amount,
            "currency": order.currency,
            "username": current_user.username,
        })
        send_email(
            to=current_user.email,
            subject="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω | Donate Raid",
            body=html
        )
        print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.email}")

    return {
        "status": "cancelled",
        "refunded_amount": float(order.amount),
        "currency": order.currency
    }


# ------------------------------------------------------------
# 5) Endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (POST /manual)
# ------------------------------------------------------------
@router.post("/manual", response_model=OrderRead)
def create_manual_order(
        data: OrderCreate,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω create_manual_order –¥–ª—è user_id={current_user.id} c –¥–∞–Ω–Ω—ã–º–∏: {data.dict()}")
    if not data.manual_game_name:
        print("    ‚Üí manual_game_name –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤–µ—Ä–Ω—É 400")
        raise HTTPException(status_code=400, detail="manual_game_name is required for manual orders")

    # üÜï –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è manual –∑–∞–∫–∞–∑–æ–≤
    from app.models.game import Game
    from app.models.product import Product, ProductType

    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–≥—Ä—É –¥–ª—è manual –∑–∞–∫–∞–∑–æ–≤
    dummy_game = db.query(Game).filter_by(name="Manual Orders").first()
    if not dummy_game:
        dummy_game = Game(
            name="Manual Orders",
            banner_url="",
            auto_support=False,
            sort_order=999999,  # –í —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü
            enabled=False  # –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
        db.add(dummy_game)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        print(f"    ‚Üí –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è manual –∑–∞–∫–∞–∑–æ–≤ —Å ID: {dummy_game.id}")

    # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    dummy_product = db.query(Product).filter_by(
        game_id=dummy_game.id,
        name="Manual Order Service"
    ).first()
    if not dummy_product:
        from decimal import Decimal
        dummy_product = Product(
            game_id=dummy_game.id,
            name="Manual Order Service",
            price_rub=Decimal("0.00"),
            type=ProductType.service,
            description="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä—É—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            enabled=False,  # –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            delivery="manual",
            sort_order=999999
        )
        db.add(dummy_product)
        db.flush()
        print(f"    ‚Üí –°–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è manual –∑–∞–∫–∞–∑–æ–≤ —Å ID: {dummy_product.id}")

    # üÜï –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ ID
    order_data_dict = data.dict()
    if not order_data_dict.get('game_id'):
        order_data_dict['game_id'] = dummy_game.id
    if not order_data_dict.get('product_id'):
        order_data_dict['product_id'] = dummy_product.id

    new_order = Order(**order_data_dict)
    new_order.user_id = current_user.id
    new_order.payment_method = PaymentMethod.manual

    db.add(new_order)
    db.commit()
    db.refresh(new_order)

    print(f"    ‚Üí –ù–æ–≤—ã–π —Ä—É—á–Ω–æ–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, id={new_order.id}, –∏–≥—Ä–∞={data.manual_game_name}")

    # üîî Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å order_id
    notify_manual_order_sync(
        f"üì• <b>–ù–æ–≤–∞—è —Ä—É—á–Ω–∞—è –∑–∞—è–≤–∫–∞ #{new_order.id}</b>\n"
        f"üë§ <b>{current_user.username or 'No username'}</b> (ID: {current_user.id})\n"
        f"üéÆ –ò–≥—Ä–∞: <code>{data.manual_game_name}</code>\n"
        f"üíµ –°—É–º–º–∞: {data.amount} {data.currency}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.comment or '-'}",
        order_id=new_order.id
    )
    print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä—É—á–Ω–æ–º –∑–∞–∫–∞–∑–µ #{new_order.id}")

    return new_order

# ------------------------------------------------------------
# 6) Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (GET /manual/me)
# ------------------------------------------------------------
@router.get("/manual/me", response_model=list[OrderRead])
def get_my_manual_orders(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω get_my_manual_orders –¥–ª—è user_id={current_user.id}")
    orders = (
        db.query(Order)
          .filter_by(user_id=current_user.id, payment_method=PaymentMethod.manual)
          .order_by(Order.created_at.desc())
          .all()
    )
    print(f"    ‚Üí –í–µ—Ä–Ω—É–ª–æ—Å—å {len(orders)} —Ä—É—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    return orders


# ------------------------------------------------------------
# 7) Endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è (POST /bulk)
# ------------------------------------------------------------
class OrderItem(BaseModel):
    game_id: int
    product_id: int
    amount: Decimal
    currency: str
    payment_method: PaymentMethod
    comment: str | None = None

class OrderBulkCreate(BaseModel):
    items: List[OrderItem]


@router.post("/bulk", response_model=OrderRead)
def create_bulk_order(
        data: OrderBulkCreate,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    print(f"‚ñ∂‚ñ∂‚ñ∂ –í—ã–∑–≤–∞–Ω create_bulk_order –¥–ª—è user_id={current_user.id} c items={data.items}")
    if not data.items:
        print("    ‚Üí items –ø—É—Å—Ç–æ–π, –≤–µ—Ä–Ω—É 400")
        raise HTTPException(status_code=400, detail="No items provided")

    total_amount = sum([item.amount for item in data.items])
    first_item = data.items[0]

    new_order = Order(
        user_id=current_user.id,
        game_id=first_item.game_id,
        product_id=first_item.product_id,
        amount=total_amount,
        currency=first_item.currency,
        payment_method=first_item.payment_method,  # üÜï –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        comment="\n".join([f"[{i.product_id}] {i.comment or ''}" for i in data.items])
    )

    db.add(new_order)
    db.commit()
    db.refresh(new_order)

    print(f"    ‚Üí –ù–æ–≤—ã–π bulk-–∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, id={new_order.id}, —Å—É–º–º–∞={total_amount}, –º–µ—Ç–æ–¥={first_item.payment_method}")

    # üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º payment_url –¥–ª—è RoboKassa –º–µ—Ç–æ–¥–æ–≤
    if first_item.payment_method in [PaymentMethod.sberbank, PaymentMethod.sbp]:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_names = []
            for item in data.items:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                product = db.query(Product).filter(Product.id == item.product_id).first()
                if product:
                    product_names.append(product.name)
                else:
                    product_names.append(f"–¢–æ–≤–∞—Ä #{item.product_id}")

            description = f"–ó–∞–∫–∞–∑ #{new_order.id}: " + ", ".join(product_names[:3])
            if len(product_names) > 3:
                description += f" –∏ –µ—â–µ {len(product_names) - 3} —Ç–æ–≤–∞—Ä(–æ–≤)"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_url = robokassa_service.create_payment_url(
                order_id=new_order.id,
                amount=total_amount,
                currency=first_item.currency,
                description=description
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –∑–∞–∫–∞–∑
            new_order.payment_url = payment_url
            db.commit()
            db.refresh(new_order)

            print(f"    ‚Üí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω payment_url –¥–ª—è RoboKassa: {payment_url}")

        except Exception as e:
            print(f"    ‚Üí –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ payment_url: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL

    # –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if current_user.email:
        html = render_template("order_created.html", {
            "order_id": new_order.id,
            "amount": new_order.amount,
            "currency": new_order.currency,
            "username": current_user.username,
        })
        send_email(
            to=current_user.email,
            subject="‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω | Donate Raid",
            body=html
        )
        print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {current_user.email}")

    return new_order


@router.post("/{order_id}/mark-paid")
def mark_order_as_paid(
        order_id: int,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
    –≠—Ç–æ—Ç endpoint –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    print(f"‚ñ∂‚ñ∂‚ñ∂ –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ {order_id} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")

    order = db.query(Order).filter_by(id=order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    if order.status != OrderStatus.pending:
        raise HTTPException(
            status_code=400,
            detail=f"–ó–∞–∫–∞–∑ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {order.status.value}"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = OrderStatus.paid
    db.commit()

    print(f"    ‚Üí –ó–∞–∫–∞–∑ {order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É
    try:
        referral_earning = ReferralService.process_referral_earning(db, order)
        if referral_earning:
            print(
                f"    ‚Üí –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ {referral_earning.amount} –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_earning.referrer_id}")
        else:
            print(f"    ‚Üí –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        print(f"    ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∞–ª–∞ —Å–±–æ–π

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if order.user and order.user.email:
        html = render_template("order_success.html", {
            "order_id": order.id,
            "product_name": order.product.name if order.product else "–¢–æ–≤–∞—Ä",
            "amount": order.amount,
            "currency": order.currency,
            "username": order.user.username,
        })
        send_email(
            to=order.user.email,
            subject="‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω | Donate Raid",
            body=html
        )
        print(f"    ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order.user.email}")

    return {
        "status": "paid",
        "order_id": order.id,
        "referral_bonus": float(referral_earning.amount) if referral_earning else 0
    }

@router.get("/referral-stats")
def get_order_referral_stats(
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏"""

    # –ó–∞–∫–∞–∑—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
    referral_orders = db.query(Order).join(ReferralEarning).filter(
        ReferralEarning.referrer_id == current_user.id
    ).all()

    total_referral_orders = len(referral_orders)
    total_referral_amount = sum(order.amount for order in referral_orders)

    return {
        "total_referral_orders": total_referral_orders,
        "total_referral_amount": float(total_referral_amount),
        "recent_referral_orders": [
            {
                "id": order.id,
                "amount": float(order.amount),
                "currency": order.currency,
                "created_at": order.created_at.isoformat()
            }
            for order in referral_orders[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
        ]
    }