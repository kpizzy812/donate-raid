# backend/app/routers/auth.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –í–ê–®–ï–ô –°–ò–°–¢–ï–ú–´
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from uuid import uuid4
from pydantic import BaseModel, EmailStr
from jose import jwt

from app.core.database import get_db
from app.core.config import settings
from app.models.user import User
from app.models.auth_token import AuthToken
from app.services.mailer import send_email, render_template
from app.services.referral import ReferralService
from app.services.auth import get_current_user

router = APIRouter()


class EmailRequest(BaseModel):
    email: EmailStr
    referral_code: str = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞


class TelegramAuthRequest(BaseModel):
    telegram_id: int
    username: str = None
    first_name: str = None
    last_name: str = None
    referral_code: str = None


@router.post("/request-link")
def request_login_link(data: EmailRequest, db: Session = Depends(get_db)):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ email"""
    user = db.query(User).filter_by(email=data.email).first()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(email=data.email)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        user.generate_referral_code()

        db.add(user)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if data.referral_code:
            referral_success = ReferralService.register_referral(
                db, user, data.referral_code
            )
            if not referral_success:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {data.referral_code}")

        db.commit()
        db.refresh(user)
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.referral_code:
            user.generate_referral_code()
            db.commit()
            db.refresh(user)

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = str(uuid4())
    expires = datetime.utcnow() + timedelta(minutes=30)

    db.add(AuthToken(user_id=user.id, token=token, expires_at=expires))
    db.commit()

    # –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞
    link = f"{settings.FRONTEND_URL}/auth/verify?token={token}"

    # –†–µ–Ω–¥–µ—Ä –ø–∏—Å—å–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    html = render_template("login_link.html", {"link": link})
    send_email(
        to=user.email,
        subject="üîê –í–∞—à –≤—Ö–æ–¥ –≤ Donate Raid",
        body=html
    )

    return {"message": "Login link sent to your email"}


@router.get("/verify")
def verify_token(token: str = Query(...), db: Session = Depends(get_db)):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ email"""
    auth_token = db.query(AuthToken).filter_by(token=token).first()

    if not auth_token:
        raise HTTPException(status_code=400, detail="Invalid token")
    if auth_token.expires_at < datetime.utcnow():
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
        db.delete(auth_token)
        db.commit()
        raise HTTPException(status_code=400, detail="Token expired")

    user = auth_token.user

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if not user.referral_code:
        user.generate_referral_code()
        db.commit()
        db.refresh(user)

    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    jwt_payload = {
        "sub": str(user.id),
        "email": user.email,
        "exp": datetime.utcnow() + timedelta(days=7)
    }

    jwt_token = jwt.encode(jwt_payload, settings.JWT_SECRET, algorithm="HS256")

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    db.delete(auth_token)
    db.commit()

    return {"token": jwt_token}


@router.post("/telegram-auth")
def telegram_auth(request: TelegramAuthRequest, db: Session = Depends(get_db)):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram"""

    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.telegram_id == request.telegram_id).first()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        display_name = request.first_name or "Telegram User"
        if request.last_name:
            display_name += f" {request.last_name}"

        user = User(
            telegram_id=request.telegram_id,
            username=request.username or display_name,
            balance=0
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        user.generate_referral_code()

        db.add(user)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if request.referral_code:
            referral_success = ReferralService.register_referral(
                db, user, request.referral_code
            )
            if not referral_success:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {request.referral_code}")

        db.commit()
        db.refresh(user)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if request.username and not user.username:
            user.username = request.username

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not user.referral_code:
            user.generate_referral_code()

        db.commit()
        db.refresh(user)

    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    jwt_payload = {
        "sub": str(user.id),
        "email": user.email,
        "telegram_id": user.telegram_id,
        "exp": datetime.utcnow() + timedelta(days=7)
    }

    jwt_token = jwt.encode(jwt_payload, settings.JWT_SECRET, algorithm="HS256")

    return {
        "token": jwt_token,
        "user": {
            "id": user.id,
            "email": user.email,
            "username": user.username,
            "telegram_id": user.telegram_id,
            "balance": float(user.balance),
            "referral_code": user.referral_code,
            "role": user.role.value
        }
    }


@router.get("/me")
def get_current_user_info(
        current_user: User = Depends(get_current_user),
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not current_user.referral_code:
        current_user.generate_referral_code()
        db.commit()
        db.refresh(current_user)

    return {
        "id": current_user.id,
        "email": current_user.email,
        "username": current_user.username,
        "telegram_id": current_user.telegram_id,
        "balance": float(current_user.balance),
        "referral_code": current_user.referral_code,
        "role": current_user.role.value,
        "total_referrals": current_user.total_referrals,
        "referral_earnings": float(current_user.referral_earnings)
    }


@router.put("/me")
def update_current_user(
        update_data: dict,
        current_user: User = Depends(get_current_user),
        db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    if "username" in update_data:
        current_user.username = update_data["username"]
    if "email" in update_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
        existing = db.query(User).filter(
            User.email == update_data["email"],
            User.id != current_user.id
        ).first()
        if existing:
            raise HTTPException(400, "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        current_user.email = update_data["email"]

    db.commit()
    db.refresh(current_user)

    return {
        "id": current_user.id,
        "email": current_user.email,
        "username": current_user.username,
        "telegram_id": current_user.telegram_id,
        "balance": float(current_user.balance),
        "referral_code": current_user.referral_code,
        "role": current_user.role.value
    }