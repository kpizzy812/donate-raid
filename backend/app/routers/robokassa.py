# backend/app/routers/robokassa.py
from fastapi import APIRouter, Request, HTTPException, Depends
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.order import Order, OrderStatus
from app.services.robokassa import robokassa_service
from app.services.telegram import notify_payment_sync
from app.services.mailer import send_email, render_template
from loguru import logger
from fastapi.responses import RedirectResponse
from typing import Dict

router = APIRouter()


@router.post("/result")
async def robokassa_result(request: Request, db: Session = Depends(get_db)):
    """
    Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç RoboKassa –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞ (Result URL)
    –≠—Ç–æ—Ç endpoint –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è RoboKassa –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–ª–∞—Ç—ã
    """
    logger.info("üîî –ü–æ–ª—É—á–µ–Ω Result webhook –æ—Ç RoboKassa")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    if request.headers.get("content-type") == "application/x-www-form-urlencoded":
        form_data = await request.form()
        data = dict(form_data)
    else:
        data = await request.json()

    logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç RoboKassa: {data}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    try:
        out_sum = data.get("OutSum")  # –°—É–º–º–∞
        inv_id = data.get("InvId")  # ID –∑–∞–∫–∞–∑–∞
        signature_value = data.get("SignatureValue")  # –ü–æ–¥–ø–∏—Å—å
        fee = data.get("Fee", "0")  # –ö–æ–º–∏—Å—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        email = data.get("EMail")  # Email –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        if not all([out_sum, inv_id, signature_value]):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç RoboKassa: {e}")
        raise HTTPException(status_code=400, detail="Invalid parameters")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if not robokassa_service.verify_signature_result(out_sum, inv_id, signature_value):
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –æ—Ç RoboKassa")
        raise HTTPException(status_code=400, detail="Invalid signature")

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    order = db.query(Order).filter(Order.id == int(inv_id)).first()
    if not order:
        logger.error(f"‚ùå –ó–∞–∫–∞–∑ #{inv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="Order not found")

    logger.info(f"üìã –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ #{order.id}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order.status}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
    if order.status != OrderStatus.pending:
        logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order.id} —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å {order.status}")
        return {"status": "OK"}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK —á—Ç–æ–±—ã RoboKassa –Ω–µ —Å–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    try:
        order.status = OrderStatus.processing  # –°—Ä–∞–∑—É –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
        order.transaction_id = f"robokassa_{inv_id}_{out_sum}"

        db.commit()
        db.refresh(order)

        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –≤ Telegram
        user_info = f"üë§ {order.user.username}" if order.user else "üë§ –ì–æ—Å—Ç—å"
        game_info = f"üéÆ {order.game.name}" if order.game else "üéÆ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞"
        product_info = f"üì¶ {order.product.name}" if order.product else "üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"

        notify_payment_sync(
            f"üí∞ <b>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ RoboKassa!</b>\n\n"
            f"üî¢ –ó–∞–∫–∞–∑: <code>#{order.id}</code>\n"
            f"{user_info}\n"
            f"{game_info}\n"
            f"{product_info}\n"
            f"üíµ –°—É–º–º–∞: <b>{order.amount} {order.currency}</b>\n"
            f"üí≥ –°–ø–æ—Å–æ–±: RoboKassa\n"
            f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <code>{order.transaction_id}</code>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if order.user and order.user.email:
            html = render_template("order_paid.html", {
                "order_id": order.id,
                "amount": order.amount,
                "currency": order.currency,
                "username": order.user.username,
                "transaction_id": order.transaction_id
            })
            send_email(
                to=order.user.email,
                subject="üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω | Donate Raid",
                body=html
            )
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {order.user.email}")

        return {"status": "OK"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order.id}: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="Database error")


@router.get("/success")
async def robokassa_success(
        OutSum: str = None,
        InvId: str = None,
        SignatureValue: str = None,
        db: Session = Depends(get_db)
):
    """
    Success URL - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    Robokassa –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ query string
    """
    logger.info(f"‚úÖ Success redirect –æ—Ç RoboKassa")
    logger.info(f"üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: OutSum={OutSum}, InvId={InvId}, SignatureValue={SignatureValue}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ InvId (ID –∑–∞–∫–∞–∑–∞)
    if InvId:
        try:
            order_id = int(InvId)
            order = db.query(Order).filter(Order.id == order_id).first()
            if order:
                logger.info(f"üìã –ó–∞–∫–∞–∑ #{order_id} –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å: {order.status}")

                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞
                return RedirectResponse(url=f"https://donateraid.ru/order/{order_id}?payment=success")
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç InvId: {InvId}")

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    return RedirectResponse(url="https://donateraid.ru/")


@router.get("/fail")
async def robokassa_fail(
        OutSum: str = None,
        InvId: str = None,
        SignatureValue: str = None,
        db: Session = Depends(get_db)
):
    """
    Fail URL - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    """
    logger.info(f"‚ùå Fail redirect –æ—Ç RoboKassa")
    logger.info(f"üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: OutSum={OutSum}, InvId={InvId}, SignatureValue={SignatureValue}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ InvId (ID –∑–∞–∫–∞–∑–∞)
    if InvId:
        try:
            order_id = int(InvId)
            order = db.query(Order).filter(Order.id == order_id).first()
            if order:
                logger.info(f"üìã –ó–∞–∫–∞–∑ #{order_id} –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å: {order.status}")

                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—à–∏–±–∫–∏
                return RedirectResponse(url=f"https://donateraid.ru/order/{order_id}?payment=failed")
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç InvId: {InvId}")

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    return RedirectResponse(url="https://donateraid.ru/")


@router.get("/payment-methods")
async def get_payment_methods():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ RoboKassa"""
    return robokassa_service.get_payment_methods()