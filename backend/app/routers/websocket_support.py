# backend/app/routers/websocket_support.py
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from typing import Dict, List
import json
from loguru import logger

router = APIRouter()


class SupportWebSocketManager:
    def __init__(self):
        self.active_connections: Dict[str, List[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, room_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞"""
        await websocket.accept()

        if room_id not in self.active_connections:
            self.active_connections[room_id] = []

        self.active_connections[room_id].append(websocket)
        logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}")

    def disconnect(self, websocket: WebSocket, room_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã"""
        if room_id in self.active_connections:
            if websocket in self.active_connections[room_id]:
                self.active_connections[room_id].remove(websocket)

            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            if not self.active_connections[room_id]:
                del self.active_connections[room_id]

        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room_id}")

    async def send_message_to_room(self, room_id: str, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        if room_id not in self.active_connections:
            logger.warning(f"‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ {room_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connections = self.active_connections[room_id].copy()
        sent_count = 0

        for connection in connections:
            try:
                await connection.send_text(json.dumps(message))
                sent_count += 1
                logger.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –£–¥–∞–ª—è–µ–º –±–∏—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self.disconnect(connection, room_id)

        logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
ws_manager = SupportWebSocketManager()


@router.websocket("/ws/{room_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str):
    """WebSocket endpoint –¥–ª—è real-time —á–∞—Ç–∞"""
    logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –∫ –∫–æ–º–Ω–∞—Ç–µ: {room_id}")

    await ws_manager.connect(websocket, room_id)

    try:
        while True:
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è keep-alive –∏–ª–∏ ping/pong)
            try:
                data = await websocket.receive_text()
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ {room_id}: {data}")
            except Exception as e:
                logger.debug(f"WebSocket receive error: {e}")
                break

    except WebSocketDisconnect:
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–æ–º–Ω–∞—Ç—ã {room_id}")
        ws_manager.disconnect(websocket, room_id)
    except Exception as e:
        logger.error(f"‚ùå WebSocket error: {e}")
        ws_manager.disconnect(websocket, room_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ bot handlers)
async def notify_support_websocket(user_id: int = None, guest_id: str = None, message_data: dict = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º room_id (–∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞)
    if user_id:
        room_id = f"user_{user_id}"
    elif guest_id:
        room_id = f"guest_{guest_id}"
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω user_id –∏–ª–∏ guest_id –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
    await ws_manager.send_message_to_room(room_id, {
        "type": "new_message",
        "data": message_data
    })

    logger.info(f"‚úÖ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É {room_id}")