# backend/app/routers/reviews.py - –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† –î–õ–Ø –û–¢–ó–´–í–û–í
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func, desc
from app.core.database import get_db
from app.services.auth import get_current_user, get_current_user_optional
from app.models.review import Review
from app.models.order import Order, OrderStatus
from app.models.user import User
from app.schemas.review import ReviewCreate, ReviewRead, ReviewStats, ReviewFilter
from typing import List, Optional

router = APIRouter()


# ------------------------------------------------------------
# 1) –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
# ------------------------------------------------------------
@router.get("", response_model=List[ReviewRead])
def get_reviews(
        rating: Optional[int] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (1-5)"),
        game_name: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–≥—Ä—ã"),
        limit: int = Query(50, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"),
        offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"),
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    print(f"‚ñ∂‚ñ∂‚ñ∂ get_reviews: rating={rating}, game_name={game_name}, limit={limit}, offset={offset}")

    query = db.query(Review).filter(Review.is_approved == True)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if rating is not None:
        if not 1 <= rating <= 5:
            raise HTTPException(status_code=400, detail="–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
        query = query.filter(Review.rating == rating)

    if game_name:
        query = query.filter(Review.game_name.ilike(f"%{game_name}%"))

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    reviews = (
        query
        .order_by(desc(Review.created_at))
        .offset(offset)
        .limit(limit)
        .all()
    )

    print(f"    ‚Üí –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π masked_email
    return [ReviewRead.from_model(review) for review in reviews]


# ------------------------------------------------------------
# 2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
# ------------------------------------------------------------
@router.get("/stats", response_model=ReviewStats)
def get_reviews_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º"""
    print("‚ñ∂‚ñ∂‚ñ∂ get_reviews_stats")

    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    total_reviews = db.query(Review).filter(Review.is_approved == True).count()

    if total_reviews == 0:
        return ReviewStats(
            total_reviews=0,
            average_rating=0.0,
            rating_distribution={1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
        )

    # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating = db.query(func.avg(Review.rating)).filter(Review.is_approved == True).scalar() or 0.0

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
    rating_counts = (
        db.query(Review.rating, func.count(Review.id))
        .filter(Review.is_approved == True)
        .group_by(Review.rating)
        .all()
    )

    rating_distribution = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
    for rating, count in rating_counts:
        rating_distribution[rating] = count

    print(f"    ‚Üí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_reviews} –æ—Ç–∑—ã–≤–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ {avg_rating:.2f}")

    return ReviewStats(
        total_reviews=total_reviews,
        average_rating=round(avg_rating, 2),
        rating_distribution=rating_distribution
    )


# ------------------------------------------------------------
# 3) –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ email –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö)
# ------------------------------------------------------------
@router.post("", response_model=ReviewRead)
def create_review(
        review_data: ReviewCreate,
        db: Session = Depends(get_db),
        current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤"""
    print(
        f"‚ñ∂‚ñ∂‚ñ∂ create_review: order_id={review_data.order_id}, user={current_user.id if current_user else 'anonymous'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = db.query(Order).options(joinedload(Order.game)).filter(Order.id == review_data.order_id).first()
    if not order:
        print(f"    ‚Üí –ó–∞–∫–∞–∑ {review_data.order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
    if order.status != OrderStatus.done:
        print(f"    ‚Üí –ó–∞–∫–∞–∑ {review_data.order_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order.status})")
        raise HTTPException(status_code=400, detail="–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
    existing_review = db.query(Review).filter(Review.order_id == review_data.order_id).first()
    if existing_review:
        print(f"    ‚Üí –ù–∞ –∑–∞–∫–∞–∑ {review_data.order_id} —É–∂–µ –µ—Å—Ç—å –æ—Ç–∑—ã–≤")
        raise HTTPException(status_code=400, detail="–ù–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email
    email = None
    is_anonymous = review_data.is_anonymous

    if current_user:
        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫–∞–∑ (–µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
        if order.user_id and order.user_id != current_user.id:
            print(f"    ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —á—É–∂–æ–π –∑–∞–∫–∞–∑ {review_data.order_id}")
            raise HTTPException(status_code=403, detail="–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã")

        email = current_user.email
        if not email and not review_data.email:
            raise HTTPException(status_code=400, detail="Email –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —É–∫–∞–∂–∏—Ç–µ –≤ –æ—Ç–∑—ã–≤–µ")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –∏–∑ –æ—Ç–∑—ã–≤–∞
        email = email or review_data.email

    else:
        # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not review_data.email:
            raise HTTPException(status_code=400, detail="–î–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å email")

        email = review_data.email
        is_anonymous = True

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
    new_review = Review(
        order_id=review_data.order_id,
        rating=review_data.rating,
        text=review_data.text,
        email=str(email),
        game_name=order.game.name,
        is_anonymous=is_anonymous,
        is_approved=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    )

    db.add(new_review)
    db.commit()
    db.refresh(new_review)

    print(f"    ‚Üí –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–Ω: id={new_review.id}, –æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
    try:
        from bot.notify import notify_new_review_sync

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_info = "üëª –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if current_user:
            user_info = f"üë§ {current_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {current_user.id})"

        review_notification_data = {
            'review_id': new_review.id,
            'rating': new_review.rating,
            'text': new_review.text,
            'game_name': new_review.game_name,
            'masked_email': new_review.get_masked_email(),
            'user_info': user_info
        }

        notify_new_review_sync(review_notification_data)
        print(f"    ‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ #{new_review.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")

    except Exception as e:
        print(f"    ‚Üí –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

    return ReviewRead.from_model(new_review)


# ------------------------------------------------------------
# 4) –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –æ—Ç–∑—ã–≤)
# ------------------------------------------------------------
@router.get("/order/{order_id}", response_model=Optional[ReviewRead])
def get_review_by_order(
        order_id: int,
        db: Session = Depends(get_db),
        current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    print(f"‚ñ∂‚ñ∂‚ñ∂ get_review_by_order: order_id={order_id}")

    review = db.query(Review).filter(Review.order_id == order_id).first()

    if not review:
        print(f"    ‚Üí –û—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    # –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
    if not review.is_approved:
        if not current_user:
            print(f"    ‚Üí –û—Ç–∑—ã–≤ {review.id} –Ω–µ –æ–¥–æ–±—Ä–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
        order = db.query(Order).filter(Order.id == order_id).first()
        if order and order.user_id != current_user.id:
            print(f"    ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—É–∂–æ–π –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤")
            return None

    print(f"    ‚Üí –û—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω: id={review.id}, –æ–¥–æ–±—Ä–µ–Ω={review.is_approved}")
    return ReviewRead.from_model(review)


# ------------------------------------------------------------
# 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
# ------------------------------------------------------------
@router.get("/can-review/{order_id}")
def can_leave_review(
        order_id: int,
        db: Session = Depends(get_db),
        current_user: Optional[User] = Depends(get_current_user_optional)
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –∑–∞–∫–∞–∑"""
    print(f"‚ñ∂‚ñ∂‚ñ∂ can_leave_review: order_id={order_id}")

    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if current_user and order.user_id and order.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É")

    can_review = order.can_leave_review()
    reason = None

    if not can_review:
        if order.status != OrderStatus.done:
            reason = f"–ó–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order.status.value})"
        elif order.review:
            reason = "–û—Ç–∑—ã–≤ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω"
        else:
            reason = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"

    result = {
        "can_review": can_review,
        "order_status": order.status.value,
        "has_review": order.review is not None
    }

    if reason:
        result["reason"] = reason

    print(f"    ‚Üí –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: {can_review}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    return result