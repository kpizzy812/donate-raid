# backend/app/services/email_receiver.py
import asyncio
import email
import re
from datetime import datetime
from email.header import decode_header
from typing import Optional

import imapclient
from loguru import logger
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.database import get_db
from app.models.support import SupportMessage, SupportStatus
from app.models.user import User


class EmailReceiver:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""

    def __init__(self):
        self.imap_server = "mail.donateraid.ru"
        self.username = "support@donateraid.ru"
        self.password = settings.MAIL_PASSWORD  # –ü–∞—Ä–æ–ª—å –∏–∑ .env
        self.port = 993  # IMAPS

    def decode_mime_words(self, s):
        """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç MIME –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        try:
            decoded_words = decode_header(s)
            return ''.join([
                word.decode(encoding or 'utf-8') if isinstance(word, bytes) else word
                for word, encoding in decoded_words
            ])
        except:
            return s

    def extract_email_from_header(self, header: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ From"""
        if not header:
            return None

        # –ò—â–µ–º email –≤ —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        match = re.search(r'<([^>]+@[^>]+)>', header)
        if match:
            return match.group(1).strip().lower()

        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–æ–±–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ email
        if '@' in header and ' ' not in header.strip():
            return header.strip().lower()

        return None

    def get_email_body(self, msg) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"""
        body = ""

        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))

                # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
                if content_type == "text/plain" and "attachment" not in content_disposition:
                    try:
                        charset = part.get_content_charset() or 'utf-8'
                        part_body = part.get_payload(decode=True).decode(charset)
                        body += part_body + "\n"
                    except:
                        continue

                elif content_type == "text/html" and not body and "attachment" not in content_disposition:
                    # –ï—Å–ª–∏ –Ω–µ—Ç plain text, –±–µ—Ä–µ–º HTML (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
                    try:
                        charset = part.get_content_charset() or 'utf-8'
                        html_body = part.get_payload(decode=True).decode(charset)
                        # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                        import re
                        body = re.sub('<[^<]+?>', '', html_body)
                    except:
                        continue
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –ø–∏—Å—å–º–æ
            try:
                charset = msg.get_content_charset() or 'utf-8'
                body = msg.get_payload(decode=True).decode(charset)
            except:
                body = str(msg.get_payload())

        return body.strip()

    async def check_new_emails(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞...")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP
            with imapclient.IMAPClient(self.imap_server, ssl=True, port=self.port) as client:
                client.login(self.username, self.password)
                client.select_folder('INBOX')

                # –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
                messages = client.search('UNSEEN')
                logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")

                for msg_id in messages:
                    try:
                        await self.process_email(client, msg_id)
                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                        client.set_flags(msg_id, ['\\Seen'])

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {msg_id}: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP: {e}")

    async def process_email(self, client, msg_id) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –ø–∏—Å—å–º–æ"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
        response = client.fetch(msg_id, ['RFC822'])
        raw_email = response[msg_id][b'RFC822']

        # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
        msg = email.message_from_bytes(raw_email)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sender = self.decode_mime_words(msg.get('From', ''))
        subject = self.decode_mime_words(msg.get('Subject', '–ë–µ–∑ —Ç–µ–º—ã'))
        body = self.get_email_body(msg)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_email = self.extract_email_from_header(sender)

        if not sender_email:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å email –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {sender}")
            return

        logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ –æ—Ç {sender_email}: {subject}")

        # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.create_support_ticket(sender_email, subject, body, sender)

    async def create_support_ticket(self, sender_email: str, subject: str, body: str, sender_name: str) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –ø–∏—Å—å–º–∞"""

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        db = next(get_db())

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            user = db.query(User).filter(User.email == sender_email).first()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"üìß **–ü–∏—Å—å–º–æ –æ—Ç {sender_name}**\n"
            message_text += f"**–¢–µ–º–∞:** {subject}\n\n"
            message_text += f"**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{body}"

            # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_message = SupportMessage(
                user_id=user.id if user else None,
                guest_id=sender_email if not user else None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ guest_id
                message=message_text,
                is_from_user=True,  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                status=SupportStatus.OPEN
            )

            db.add(support_message)
            db.commit()
            db.refresh(support_message)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #{support_message.id} –æ—Ç {sender_email}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await self.notify_telegram(support_message, sender_email, subject)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
            db.rollback()
        finally:
            db.close()

    async def notify_telegram(self, ticket: SupportMessage, sender_email: str, subject: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            from bot.handlers.support import notify_new_support_message

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"üìß **–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n\n"
            text += f"**–û—Ç:** {sender_email}\n"
            text += f"**–¢–µ–º–∞:** {subject}\n"
            text += f"**–¢–∏–∫–µ—Ç:** #{ticket.id}\n\n"
            text += f"–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞"

            await notify_new_support_message(
                user_id=ticket.user_id,
                text=text,
                guest_id=ticket.guest_id
            )

            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket.id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
email_receiver = EmailReceiver()