# backend/app/services/robokassa.py
import hashlib
import os
from typing import Optional, Dict, Any
from decimal import Decimal
import requests
from loguru import logger


class RoboKassaService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RoboKassa API"""

    def __init__(self):
        # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
        self.merchant_login = os.getenv("ROBOKASSA_MERCHANT_LOGIN", "demo")
        self.password1 = os.getenv("ROBOKASSA_PASSWORD_1", "password_1")
        self.password2 = os.getenv("ROBOKASSA_PASSWORD_2", "password_2")
        self.is_test = os.getenv("ROBOKASSA_IS_TEST", "true").lower() == "true"

        # URL'—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        if self.is_test:
            self.payment_url = "https://auth.robokassa.ru/Merchant/Index.aspx"
        else:
            self.payment_url = "https://auth.robokassa.ru/Merchant/Index.aspx"

    def generate_signature(self, merchant_login: str, out_sum: str, inv_id: str,
                           password: str, receipt: Optional[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è RoboKassa"""
        if receipt:
            # –° —á–µ–∫–æ–º: MerchantLogin:OutSum:InvId:Receipt:Password
            signature_string = f"{merchant_login}:{out_sum}:{inv_id}:{receipt}:{password}"
        else:
            # –ë–µ–∑ —á–µ–∫–∞: MerchantLogin:OutSum:InvId:Password
            signature_string = f"{merchant_login}:{out_sum}:{inv_id}:{password}"

        logger.info(f"üîë –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {signature_string}")
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        logger.info(f"üîë –ü–æ–¥–ø–∏—Å—å: {signature}")
        return signature

    def create_payment_url(self, order_id: int, amount: Decimal, currency: str = "RUB",
                           description: str = None, receipt: Optional[str] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ RoboKassa"""

        out_sum = str(amount)
        inv_id = str(order_id)
        desc = description or f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –Ω–∞ Donate Raid"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = self.generate_signature(
            self.merchant_login, out_sum, inv_id, self.password1, receipt
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
        params = {
            "MerchantLogin": self.merchant_login,
            "OutSum": out_sum,
            "InvId": inv_id,
            "Description": desc,
            "SignatureValue": signature,
            "Culture": "ru",  # –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if self.is_test:
            params["IsTest"] = "1"

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if receipt:
            params["Receipt"] = receipt

        # Success/Fail URL'—ã
        params["SuccessURL"] = f"https://donateraid.ru/order/{order_id}"
        params["FailURL"] = f"https://donateraid.ru/order/{order_id}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL
        query_string = "&".join([f"{key}={requests.utils.quote(str(value))}" for key, value in params.items()])
        payment_url = f"{self.payment_url}?{query_string}"

        logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #{order_id}: {payment_url}")
        return payment_url

    def verify_signature_result(self, out_sum: str, inv_id: str, signature_value: str,
                                receipt: Optional[str] = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç RoboKassa (Result URL)"""

        # –î–ª—è Result URL –ø–æ–¥–ø–∏—Å—å: OutSum:InvId:Password#2 (–±–µ–∑ MerchantLogin!)
        if receipt:
            signature_string = f"{out_sum}:{inv_id}:{receipt}:{self.password2}"
        else:
            signature_string = f"{out_sum}:{inv_id}:{self.password2}"

        logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Result: {signature_string}")
        expected_signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()

        is_valid = signature_value.lower() == expected_signature.lower()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Result: {'‚úÖ –û–ö' if is_valid else '‚ùå –û–®–ò–ë–ö–ê'}")
        logger.info(f"    –ü–æ–ª—É—á–µ–Ω–∞: {signature_value}")
        logger.info(f"    –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_signature}")

        return is_valid

    def get_payment_methods(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
        return {
            "sberbank": {
                "name": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã",
                "description": "Visa, MasterCard, –ú–ò–†",
                "icon": "credit-card",
                "type": "card"
            },
            "sbp": {
                "name": "–°–ë–ü",
                "description": "–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
                "icon": "smartphone",
                "type": "sbp"
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
robokassa_service = RoboKassaService()