# backend/app/services/telegram.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò –î–õ–Ø –ü–õ–ê–¢–ù–´–• –ó–ê–ö–ê–ó–û–í
import asyncio
import aiohttp
from typing import Optional
from app.core.config import settings
from loguru import logger


class TelegramNotifier:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self):
        self.bot_token = settings.TG_BOT_TOKEN
        self.admin_chat_ids = self._parse_admin_chat_ids()
        self.enabled = bool(self.bot_token and self.admin_chat_ids)

    def _parse_admin_chat_ids(self) -> list[str]:
        """–ü–∞—Ä—Å–∏—Ç ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not settings.TG_ADMIN_CHAT_IDS:
            return []
        return [chat_id.strip() for chat_id in settings.TG_ADMIN_CHAT_IDS.split(',')]

    async def send_message(self, text: str, chat_id: Optional[str] = None, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            logger.warning("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id)")
            return False

        chat_ids = [chat_id] if chat_id else self.admin_chat_ids

        for chat_id in chat_ids:
            try:
                url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
                payload = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if reply_markup:
                    payload["reply_markup"] = reply_markup
                    logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {reply_markup}")

                logger.info(f"üîç –ü–æ–ª–Ω—ã–π payload –¥–ª—è Telegram API: {payload}")

                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=payload) as response:
                        response_text = await response.text()
                        if response.status == 200:
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {response.status}")
                            logger.error(f"–û—Ç–≤–µ—Ç Telegram API: {response_text}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

        return True

    def send_message_sync(self, text: str, chat_id: Optional[str] = None, reply_markup=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                asyncio.create_task(self.send_message(text, chat_id, reply_markup))
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ
                loop.run_until_complete(self.send_message(text, chat_id, reply_markup))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()


# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def notify_order_sync(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    telegram_notifier.send_message_sync(message)


def notify_manual_order_sync(message: str, order_id: int = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä—É—á–Ω–æ–º –∑–∞–∫–∞–∑–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    keyboard = None
    if order_id:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram Bot API
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve_{order_id}"}],
                [{"text": "‚Ü©Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º", "callback_data": f"reject_with_refund_{order_id}"}],
                [{"text": "‚ùå –£–¥–∞–ª–∏—Ç—å", "callback_data": f"delete_order_{order_id}"}]
            ]
        }

    telegram_notifier.send_message_sync(message, reply_markup=keyboard)


def notify_payment_sync(message: str, order_id: int = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = None
    if order_id:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram Bot API
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", "callback_data": f"paid_complete_{order_id}"},
                    {"text": "üí∏ –í–æ–∑–≤—Ä–∞—Ç", "callback_data": f"paid_refund_{order_id}"}
                ]
            ]
        }

    telegram_notifier.send_message_sync(message, reply_markup=keyboard)


# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö
from app.services.telegram import notify_order_sync, notify_manual_order_sync, notify_payment_sync