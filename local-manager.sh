#!/usr/bin/env bash
# local-manager.sh - CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
set -euo pipefail

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

show_header() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}                    üíª LOCAL MANAGER üíª                       ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${CYAN}                  –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞                        ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

show_menu() {
    echo -e "${WHITE}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    echo ""
    echo -e "${CYAN}üê≥ DOCKER –õ–û–ö–ê–õ–¨–ù–û:${NC}"
    echo -e "  ${GREEN}1)${NC} üöÄ –ó–∞–ø—É—Å–∫ –≤ Docker (docker-compose up)"
    echo -e "  ${GREEN}2)${NC} ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}3)${NC} üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}4)${NC} üèóÔ∏è  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}5)${NC} üìã –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo -e "  ${GREEN}6)${NC} üìú –õ–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo ""
    echo -e "${CYAN}‚ö° –†–ê–ó–†–ê–ë–û–¢–ö–ê (–±–µ–∑ Docker):${NC}"
    echo -e "  ${GREEN}7)${NC} üêç –ó–∞–ø—É—Å–∫ Backend (FastAPI)"
    echo -e "  ${GREEN}8)${NC} ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot"
    echo -e "  ${GREEN}9)${NC} ‚öõÔ∏è  –ó–∞–ø—É—Å–∫ Frontend (Next.js)"
    echo -e "  ${GREEN}10)${NC} üìä –ó–∞–ø—É—Å–∫ PostgreSQL (Docker)"
    echo ""
    echo -e "${CYAN}üóÑÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•:${NC}"
    echo -e "  ${GREEN}11)${NC} üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
    echo -e "  ${GREEN}12)${NC} üìù –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"
    echo -e "  ${GREEN}13)${NC} üíæ –ë—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"
    echo -e "  ${GREEN}14)${NC} üóÉÔ∏è  –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î (psql)"
    echo ""
    echo -e "${CYAN}üõ†Ô∏è  –£–¢–ò–õ–ò–¢–´:${NC}"
    echo -e "  ${GREEN}15)${NC} üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo -e "  ${GREEN}16)${NC} üßπ –û—á–∏—Å—Ç–∫–∞ (node_modules, __pycache__, .next)"
    echo -e "  ${GREEN}17)${NC} üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤"
    echo ""
    echo -e "  ${RED}0)${NC} ‚ùå –í—ã—Ö–æ–¥"
    echo ""
    echo -e -n "${YELLOW}–í–∞—à –≤—ã–±–æ—Ä [0-17]: ${NC}"
}

pause() {
    echo ""
    echo -e -n "${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...${NC}"
    read -r
}

# Docker —Ñ—É–Ω–∫—Ü–∏–∏
docker_up() {
    echo -e "${GREEN}üöÄ –ó–∞–ø—É—Å–∫ –≤ Docker...${NC}"
    docker-compose up -d
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    echo -e "${CYAN}üåê Frontend: http://localhost:3001${NC}"
    echo -e "${CYAN}üîå API: http://localhost:8001${NC}"
    echo -e "${CYAN}üìö API Docs: http://localhost:8001/docs${NC}"
}

docker_down() {
    echo -e "${GREEN}‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
}

docker_restart() {
    echo -e "${GREEN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose restart
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
}

docker_rebuild() {
    echo -e "${GREEN}üèóÔ∏è –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
    docker-compose down
    docker-compose build --no-cache
    docker-compose up -d
    echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

docker_status() {
    echo -e "${GREEN}üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    docker-compose ps
}

docker_logs() {
    echo -e "${GREEN}üìú –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
    docker-compose logs --tail=50
}

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ Docker
dev_backend() {
    echo -e "${GREEN}üêç –ó–∞–ø—É—Å–∫ Backend (FastAPI)...${NC}"
    echo -e "${YELLOW}–ü–æ—Ä—Ç: 8001${NC}"
    cd backend
    if [ ! -d ".venv" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—ë–º...${NC}"
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt
    else
        source .venv/bin/activate
    fi

    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI...${NC}"
    python -m uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
}

dev_bot() {
    echo -e "${GREEN}ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot...${NC}"
    cd backend
    if [ ! -d ".venv" ]; then
        echo -e "${RED}‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Backend.${NC}"
        return 1
    fi

    source .venv/bin/activate
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...${NC}"
    python bot/main.py
}

dev_frontend() {
    echo -e "${GREEN}‚öõÔ∏è –ó–∞–ø—É—Å–∫ Frontend (Next.js)...${NC}"
    echo -e "${YELLOW}–ü–æ—Ä—Ç: 3001${NC}"
    cd frontend

    if [ ! -d "node_modules" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
        npm install
    fi

    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Next.js...${NC}"
    npm run dev
}

dev_database() {
    echo -e "${GREEN}üìä –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker...${NC}"
    docker-compose up -d postgres
    echo -e "${GREEN}‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω!${NC}"
    echo -e "${CYAN}üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: localhost:5432${NC}"
}

# –§—É–Ω–∫—Ü–∏–∏ –ë–î
db_migrate() {
    echo -e "${GREEN}üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...${NC}"
    cd backend
    if [ -d ".venv" ]; then
        source .venv/bin/activate
        alembic upgrade head
    else
        echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–µ–º Docker...${NC}"
        docker-compose exec backend alembic upgrade head
    fi
    echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!${NC}"
}

db_create_migration() {
    echo -e "${GREEN}üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...${NC}"
    echo -e -n "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${NC}"
    read -r description

    cd backend
    if [ -d ".venv" ]; then
        source .venv/bin/activate
        alembic revision --autogenerate -m "$description"
    else
        echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–µ–º Docker...${NC}"
        docker-compose exec backend alembic revision --autogenerate -m "$description"
    fi
    echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!${NC}"
}

db_backup() {
    echo -e "${GREEN}üíæ –ë—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...${NC}"
    local backup_name="local_backup_$(date +%Y%m%d_%H%M%S).sql"

    mkdir -p backups
    docker-compose exec -T postgres pg_dump -U postgres donateraid > "backups/$backup_name"
    echo -e "${GREEN}‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backups/$backup_name${NC}"
}

db_connect() {
    echo -e "${GREEN}üóÉÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...${NC}"
    docker-compose exec postgres psql -U postgres -d donateraid
}

# –£—Ç–∏–ª–∏—Ç—ã
install_deps() {
    echo -e "${GREEN}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"

    echo -e "${BLUE}üêç Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
    cd backend
    if [ ! -d ".venv" ]; then
        python -m venv .venv
    fi
    source .venv/bin/activate
    pip install -r requirements.txt
    cd ..

    echo -e "${BLUE}‚öõÔ∏è Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
    cd frontend
    npm install
    cd ..

    echo -e "${GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
}

cleanup() {
    echo -e "${GREEN}üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"

    echo -e "${BLUE}üóëÔ∏è –£–¥–∞–ª—è–µ–º node_modules...${NC}"
    find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true

    echo -e "${BLUE}üóëÔ∏è –£–¥–∞–ª—è–µ–º __pycache__...${NC}"
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

    echo -e "${BLUE}üóëÔ∏è –£–¥–∞–ª—è–µ–º .next...${NC}"
    rm -rf frontend/.next 2>/dev/null || true

    echo -e "${BLUE}üóëÔ∏è –£–¥–∞–ª—è–µ–º .pyc —Ñ–∞–π–ª—ã...${NC}"
    find . -name "*.pyc" -delete 2>/dev/null || true

    echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

check_ports() {
    echo -e "${GREEN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...${NC}"
    echo ""

    ports=(3001 8001 5432)
    for port in "${ports[@]}"; do
        if lsof -i :$port >/dev/null 2>&1; then
            echo -e "${RED}‚ùå –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç:${NC}"
            lsof -i :$port
        else
            echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
        fi
        echo ""
    done
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
main() {
    while true; do
        show_header
        show_menu

        read -r choice
        echo ""

        case $choice in
            1) docker_up && pause ;;
            2) docker_down && pause ;;
            3) docker_restart && pause ;;
            4) docker_rebuild && pause ;;
            5) docker_status && pause ;;
            6) docker_logs && pause ;;
            7) dev_backend ;;
            8) dev_bot ;;
            9) dev_frontend ;;
            10) dev_database && pause ;;
            11) db_migrate && pause ;;
            12) db_create_migration && pause ;;
            13) db_backup && pause ;;
            14) db_connect ;;
            15) install_deps && pause ;;
            16) cleanup && pause ;;
            17) check_ports && pause ;;
            0) echo -e "${GREEN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}" && exit 0 ;;
            *) echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}" && pause ;;
        esac
    done
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
    echo -e "${YELLOW}–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.${NC}"
    exit 1
fi

main